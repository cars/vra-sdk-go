// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BlueprintVersion BlueprintVersion
//
// swagger:model BlueprintVersion
type BlueprintVersion struct {

	// Draft blueprint ID
	// Read Only: true
	BlueprintID string `json:"blueprintId,omitempty"`

	// Blueprint YAML content
	// Read Only: true
	Content string `json:"content,omitempty"`

	// Created time
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// Created by
	// Read Only: true
	CreatedBy string `json:"createdBy,omitempty"`

	// Draft blueprint description
	// Read Only: true
	Description string `json:"description,omitempty"`

	// Object ID
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Blueprint name
	// Read Only: true
	Name string `json:"name,omitempty"`

	// Org ID
	// Read Only: true
	OrgID string `json:"orgId,omitempty"`

	// Project ID
	ProjectID string `json:"projectId,omitempty"`

	// Project Name
	// Read Only: true
	ProjectName string `json:"projectName,omitempty"`

	// Blueprint version self link
	// Read Only: true
	SelfLink string `json:"selfLink,omitempty"`

	// Blueprint status
	// Read Only: true
	// Enum: [DRAFT VERSIONED RELEASED]
	Status string `json:"status,omitempty"`

	// Updated time
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`

	// Updated by
	// Read Only: true
	UpdatedBy string `json:"updatedBy,omitempty"`

	// Validation result
	// Read Only: true
	Valid *bool `json:"valid,omitempty"`

	// Blueprint version
	// Read Only: true
	Version string `json:"version,omitempty"`

	// Blueprint version change log
	// Read Only: true
	VersionChangeLog string `json:"versionChangeLog,omitempty"`

	// Blueprint version description
	// Read Only: true
	VersionDescription string `json:"versionDescription,omitempty"`
}

// Validate validates this blueprint version
func (m *BlueprintVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlueprintVersion) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var blueprintVersionTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DRAFT","VERSIONED","RELEASED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		blueprintVersionTypeStatusPropEnum = append(blueprintVersionTypeStatusPropEnum, v)
	}
}

const (

	// BlueprintVersionStatusDRAFT captures enum value "DRAFT"
	BlueprintVersionStatusDRAFT string = "DRAFT"

	// BlueprintVersionStatusVERSIONED captures enum value "VERSIONED"
	BlueprintVersionStatusVERSIONED string = "VERSIONED"

	// BlueprintVersionStatusRELEASED captures enum value "RELEASED"
	BlueprintVersionStatusRELEASED string = "RELEASED"
)

// prop value enum
func (m *BlueprintVersion) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, blueprintVersionTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BlueprintVersion) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *BlueprintVersion) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this blueprint version based on the context it is used
func (m *BlueprintVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBlueprintID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrgID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProjectName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfLink(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateValid(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersionChangeLog(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersionDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlueprintVersion) contextValidateBlueprintID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "blueprintId", "body", string(m.BlueprintID)); err != nil {
		return err
	}

	return nil
}

func (m *BlueprintVersion) contextValidateContent(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "content", "body", string(m.Content)); err != nil {
		return err
	}

	return nil
}

func (m *BlueprintVersion) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdAt", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *BlueprintVersion) contextValidateCreatedBy(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdBy", "body", string(m.CreatedBy)); err != nil {
		return err
	}

	return nil
}

func (m *BlueprintVersion) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "description", "body", string(m.Description)); err != nil {
		return err
	}

	return nil
}

func (m *BlueprintVersion) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *BlueprintVersion) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *BlueprintVersion) contextValidateOrgID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "orgId", "body", string(m.OrgID)); err != nil {
		return err
	}

	return nil
}

func (m *BlueprintVersion) contextValidateProjectName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "projectName", "body", string(m.ProjectName)); err != nil {
		return err
	}

	return nil
}

func (m *BlueprintVersion) contextValidateSelfLink(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "selfLink", "body", string(m.SelfLink)); err != nil {
		return err
	}

	return nil
}

func (m *BlueprintVersion) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

func (m *BlueprintVersion) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updatedAt", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *BlueprintVersion) contextValidateUpdatedBy(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updatedBy", "body", string(m.UpdatedBy)); err != nil {
		return err
	}

	return nil
}

func (m *BlueprintVersion) contextValidateValid(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "valid", "body", m.Valid); err != nil {
		return err
	}

	return nil
}

func (m *BlueprintVersion) contextValidateVersion(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "version", "body", string(m.Version)); err != nil {
		return err
	}

	return nil
}

func (m *BlueprintVersion) contextValidateVersionChangeLog(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "versionChangeLog", "body", string(m.VersionChangeLog)); err != nil {
		return err
	}

	return nil
}

func (m *BlueprintVersion) contextValidateVersionDescription(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "versionDescription", "body", string(m.VersionDescription)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlueprintVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlueprintVersion) UnmarshalBinary(b []byte) error {
	var res BlueprintVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
