// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResourceAction ResourceAction
// swagger:model ResourceAction
type ResourceAction struct {

	// Resource action scope
	ActionCriteria *Criteria `json:"actionCriteria,omitempty"`

	// Resource action scope
	Criteria string `json:"criteria,omitempty"`

	// Dependent resources
	Dependents []string `json:"dependents"`

	// Resource action description
	Description string `json:"description,omitempty"`

	// Resource action display name
	DisplayName string `json:"displayName,omitempty"`

	// Resource action has form
	HasForm bool `json:"hasForm,omitempty"`

	// Resource action id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// Resource action name
	Name string `json:"name,omitempty"`

	// Resource action input schema
	Schema interface{} `json:"schema,omitempty"`

	// Resource action is valid for current state
	Valid bool `json:"valid,omitempty"`
}

// Validate validates this resource action
func (m *ResourceAction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionCriteria(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceAction) validateActionCriteria(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionCriteria) { // not required
		return nil
	}

	if m.ActionCriteria != nil {
		if err := m.ActionCriteria.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actionCriteria")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceAction) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourceAction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceAction) UnmarshalBinary(b []byte) error {
	var res ResourceAction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
