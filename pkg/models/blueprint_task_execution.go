// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BlueprintTaskExecution BlueprintTaskExecution
//
// swagger:model BlueprintTaskExecution
type BlueprintTaskExecution struct {

	// Tasks depends on other tasks
	// Read Only: true
	DependsOnTasks []string `json:"dependsOnTasks"`

	// Task failure message
	// Read Only: true
	FailureMessage string `json:"failureMessage,omitempty"`

	// Task input properties
	// Read Only: true
	InputProperties interface{} `json:"inputProperties,omitempty"`

	// Task output properties
	// Read Only: true
	OutputProperties interface{} `json:"outputProperties,omitempty"`

	// Resource name
	// Read Only: true
	ResourceName string `json:"resourceName,omitempty"`

	// Resource type
	// Read Only: true
	ResourceType string `json:"resourceType,omitempty"`

	// Task status
	// Read Only: true
	// Enum: [CREATED STARTED FINISHED FAILED CANCELLED]
	Status string `json:"status,omitempty"`

	// Task name
	// Read Only: true
	TaskName string `json:"taskName,omitempty"`
}

// Validate validates this blueprint task execution
func (m *BlueprintTaskExecution) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var blueprintTaskExecutionTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREATED","STARTED","FINISHED","FAILED","CANCELLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		blueprintTaskExecutionTypeStatusPropEnum = append(blueprintTaskExecutionTypeStatusPropEnum, v)
	}
}

const (

	// BlueprintTaskExecutionStatusCREATED captures enum value "CREATED"
	BlueprintTaskExecutionStatusCREATED string = "CREATED"

	// BlueprintTaskExecutionStatusSTARTED captures enum value "STARTED"
	BlueprintTaskExecutionStatusSTARTED string = "STARTED"

	// BlueprintTaskExecutionStatusFINISHED captures enum value "FINISHED"
	BlueprintTaskExecutionStatusFINISHED string = "FINISHED"

	// BlueprintTaskExecutionStatusFAILED captures enum value "FAILED"
	BlueprintTaskExecutionStatusFAILED string = "FAILED"

	// BlueprintTaskExecutionStatusCANCELLED captures enum value "CANCELLED"
	BlueprintTaskExecutionStatusCANCELLED string = "CANCELLED"
)

// prop value enum
func (m *BlueprintTaskExecution) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, blueprintTaskExecutionTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BlueprintTaskExecution) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this blueprint task execution based on the context it is used
func (m *BlueprintTaskExecution) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDependsOnTasks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFailureMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaskName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlueprintTaskExecution) contextValidateDependsOnTasks(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dependsOnTasks", "body", []string(m.DependsOnTasks)); err != nil {
		return err
	}

	return nil
}

func (m *BlueprintTaskExecution) contextValidateFailureMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "failureMessage", "body", string(m.FailureMessage)); err != nil {
		return err
	}

	return nil
}

func (m *BlueprintTaskExecution) contextValidateResourceName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "resourceName", "body", string(m.ResourceName)); err != nil {
		return err
	}

	return nil
}

func (m *BlueprintTaskExecution) contextValidateResourceType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "resourceType", "body", string(m.ResourceType)); err != nil {
		return err
	}

	return nil
}

func (m *BlueprintTaskExecution) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

func (m *BlueprintTaskExecution) contextValidateTaskName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "taskName", "body", string(m.TaskName)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlueprintTaskExecution) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlueprintTaskExecution) UnmarshalBinary(b []byte) error {
	var res BlueprintTaskExecution
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
