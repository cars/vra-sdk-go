// Code generated by go-swagger; DO NOT EDIT.

package deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new deployments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for deployments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CheckDeploymentNameUsingGET returns true if a deployment with the supplied name exists
*/
func (a *Client) CheckDeploymentNameUsingGET(params *CheckDeploymentNameUsingGETParams) (*CheckDeploymentNameUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckDeploymentNameUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "checkDeploymentNameUsingGET",
		Method:             "GET",
		PathPattern:        "/deployment/api/deployments/names/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckDeploymentNameUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CheckDeploymentNameUsingGETOK), nil

}

/*
DeleteDeploymentUsingDELETE deletes the deployment with the supplied ID
*/
func (a *Client) DeleteDeploymentUsingDELETE(params *DeleteDeploymentUsingDELETEParams) (*DeleteDeploymentUsingDELETEOK, *DeleteDeploymentUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDeploymentUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDeploymentUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/deployment/api/deployments/{depId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDeploymentUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteDeploymentUsingDELETEOK:
		return value, nil, nil
	case *DeleteDeploymentUsingDELETENoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
DeleteResourceUsingDELETE deletes the resource with the specified ID that is correlated with the supplied deployment
*/
func (a *Client) DeleteResourceUsingDELETE(params *DeleteResourceUsingDELETEParams) (*DeleteResourceUsingDELETEOK, *DeleteResourceUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteResourceUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteResourceUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/deployment/api/deployments/{depId}/resources/{resourceId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteResourceUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteResourceUsingDELETEOK:
		return value, nil, nil
	case *DeleteResourceUsingDELETENoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetDeploymentActionUsingGET returns a resource operation for the deployment specified by its id
*/
func (a *Client) GetDeploymentActionUsingGET(params *GetDeploymentActionUsingGETParams) (*GetDeploymentActionUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentActionUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeploymentActionUsingGET",
		Method:             "GET",
		PathPattern:        "/deployment/api/deployments/{depId}/actions/{actionId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeploymentActionUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeploymentActionUsingGETOK), nil

}

/*
GetDeploymentActionsUsingGET returns the complete list of available operations that can be performed on a given deployment
*/
func (a *Client) GetDeploymentActionsUsingGET(params *GetDeploymentActionsUsingGETParams) (*GetDeploymentActionsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentActionsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeploymentActionsUsingGET",
		Method:             "GET",
		PathPattern:        "/deployment/api/deployments/{depId}/actions",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeploymentActionsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeploymentActionsUsingGETOK), nil

}

/*
GetDeploymentByIDUsingGET returns the deployment with the supplied ID
*/
func (a *Client) GetDeploymentByIDUsingGET(params *GetDeploymentByIDUsingGETParams) (*GetDeploymentByIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentByIDUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeploymentByIdUsingGET",
		Method:             "GET",
		PathPattern:        "/deployment/api/deployments/{depId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeploymentByIDUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeploymentByIDUsingGETOK), nil

}

/*
GetDeploymentResourcesUsingGET returns a paginated list of resources corresponding to the deployment with the supplied ID
*/
func (a *Client) GetDeploymentResourcesUsingGET(params *GetDeploymentResourcesUsingGETParams) (*GetDeploymentResourcesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentResourcesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeploymentResourcesUsingGET",
		Method:             "GET",
		PathPattern:        "/deployment/api/deployments/{depId}/resources",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeploymentResourcesUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeploymentResourcesUsingGETOK), nil

}

/*
GetDeploymentsForProjectUsingGET returns a count of deployments using the project
*/
func (a *Client) GetDeploymentsForProjectUsingGET(params *GetDeploymentsForProjectUsingGETParams) (*GetDeploymentsForProjectUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentsForProjectUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeploymentsForProjectUsingGET",
		Method:             "GET",
		PathPattern:        "/deployment/api/projects/{projectId}/deployment-count",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeploymentsForProjectUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeploymentsForProjectUsingGETOK), nil

}

/*
GetDeploymentsUsingGET returns a paginated list of deployments
*/
func (a *Client) GetDeploymentsUsingGET(params *GetDeploymentsUsingGETParams) (*GetDeploymentsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeploymentsUsingGET",
		Method:             "GET",
		PathPattern:        "/deployment/api/deployments",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeploymentsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeploymentsUsingGETOK), nil

}

/*
GetResourceActionUsingGET returns a resource operation for the resource specified by its id
*/
func (a *Client) GetResourceActionUsingGET(params *GetResourceActionUsingGETParams) (*GetResourceActionUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceActionUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getResourceActionUsingGET",
		Method:             "GET",
		PathPattern:        "/deployment/api/deployments/{depId}/resources/{resourceId}/actions/{actionId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourceActionUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetResourceActionUsingGETOK), nil

}

/*
GetResourceActionsUsingGET returns the complete list of available operations that can be performed on a given resource
*/
func (a *Client) GetResourceActionsUsingGET(params *GetResourceActionsUsingGETParams) (*GetResourceActionsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceActionsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getResourceActionsUsingGET",
		Method:             "GET",
		PathPattern:        "/deployment/api/deployments/{depId}/resources/{resourceId}/actions",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourceActionsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetResourceActionsUsingGETOK), nil

}

/*
GetResourceByIDUsingGET returns the resource with the specified ID that is correlated with the supplied deployment
*/
func (a *Client) GetResourceByIDUsingGET(params *GetResourceByIDUsingGETParams) (*GetResourceByIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceByIDUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getResourceByIdUsingGET",
		Method:             "GET",
		PathPattern:        "/deployment/api/deployments/{depId}/resources/{resourceId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourceByIDUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetResourceByIDUsingGETOK), nil

}

/*
PatchDeploymentUsingPATCH updates the deployment with the supplied ID
*/
func (a *Client) PatchDeploymentUsingPATCH(params *PatchDeploymentUsingPATCHParams) (*PatchDeploymentUsingPATCHOK, *PatchDeploymentUsingPATCHNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDeploymentUsingPATCHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchDeploymentUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/deployment/api/deployments/{depId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchDeploymentUsingPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchDeploymentUsingPATCHOK:
		return value, nil, nil
	case *PatchDeploymentUsingPATCHNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
SubmitDeploymentActionRequestUsingPOST submits a deployment resource action request
*/
func (a *Client) SubmitDeploymentActionRequestUsingPOST(params *SubmitDeploymentActionRequestUsingPOSTParams) (*SubmitDeploymentActionRequestUsingPOSTOK, *SubmitDeploymentActionRequestUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubmitDeploymentActionRequestUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "submitDeploymentActionRequestUsingPOST",
		Method:             "POST",
		PathPattern:        "/deployment/api/deployments/{depId}/requests",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubmitDeploymentActionRequestUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SubmitDeploymentActionRequestUsingPOSTOK:
		return value, nil, nil
	case *SubmitDeploymentActionRequestUsingPOSTCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
SubmitResourceActionRequestUsingPOST submits a resource action request
*/
func (a *Client) SubmitResourceActionRequestUsingPOST(params *SubmitResourceActionRequestUsingPOSTParams) (*SubmitResourceActionRequestUsingPOSTOK, *SubmitResourceActionRequestUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubmitResourceActionRequestUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "submitResourceActionRequestUsingPOST",
		Method:             "POST",
		PathPattern:        "/deployment/api/deployments/{depId}/resources/{resourceId}/requests",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubmitResourceActionRequestUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SubmitResourceActionRequestUsingPOSTOK:
		return value, nil, nil
	case *SubmitResourceActionRequestUsingPOSTCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
