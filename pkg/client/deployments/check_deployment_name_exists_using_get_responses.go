// Code generated by go-swagger; DO NOT EDIT.

package deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// CheckDeploymentNameExistsUsingGETReader is a Reader for the CheckDeploymentNameExistsUsingGET structure.
type CheckDeploymentNameExistsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CheckDeploymentNameExistsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCheckDeploymentNameExistsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCheckDeploymentNameExistsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCheckDeploymentNameExistsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCheckDeploymentNameExistsUsingGETOK creates a CheckDeploymentNameExistsUsingGETOK with default headers values
func NewCheckDeploymentNameExistsUsingGETOK() *CheckDeploymentNameExistsUsingGETOK {
	return &CheckDeploymentNameExistsUsingGETOK{}
}

/* CheckDeploymentNameExistsUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type CheckDeploymentNameExistsUsingGETOK struct {
}

func (o *CheckDeploymentNameExistsUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /deployment/api/deployments/names][%d] checkDeploymentNameExistsUsingGETOK ", 200)
}

func (o *CheckDeploymentNameExistsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCheckDeploymentNameExistsUsingGETUnauthorized creates a CheckDeploymentNameExistsUsingGETUnauthorized with default headers values
func NewCheckDeploymentNameExistsUsingGETUnauthorized() *CheckDeploymentNameExistsUsingGETUnauthorized {
	return &CheckDeploymentNameExistsUsingGETUnauthorized{}
}

/* CheckDeploymentNameExistsUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CheckDeploymentNameExistsUsingGETUnauthorized struct {
}

func (o *CheckDeploymentNameExistsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /deployment/api/deployments/names][%d] checkDeploymentNameExistsUsingGETUnauthorized ", 401)
}

func (o *CheckDeploymentNameExistsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCheckDeploymentNameExistsUsingGETNotFound creates a CheckDeploymentNameExistsUsingGETNotFound with default headers values
func NewCheckDeploymentNameExistsUsingGETNotFound() *CheckDeploymentNameExistsUsingGETNotFound {
	return &CheckDeploymentNameExistsUsingGETNotFound{}
}

/* CheckDeploymentNameExistsUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CheckDeploymentNameExistsUsingGETNotFound struct {
	Payload *models.Error
}

func (o *CheckDeploymentNameExistsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /deployment/api/deployments/names][%d] checkDeploymentNameExistsUsingGETNotFound  %+v", 404, o.Payload)
}
func (o *CheckDeploymentNameExistsUsingGETNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *CheckDeploymentNameExistsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
