// Code generated by go-swagger; DO NOT EDIT.

package deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDeploymentsUsingGETParams creates a new GetDeploymentsUsingGETParams object
// with the default values initialized.
func NewGetDeploymentsUsingGETParams() *GetDeploymentsUsingGETParams {
	var ()
	return &GetDeploymentsUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDeploymentsUsingGETParamsWithTimeout creates a new GetDeploymentsUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDeploymentsUsingGETParamsWithTimeout(timeout time.Duration) *GetDeploymentsUsingGETParams {
	var ()
	return &GetDeploymentsUsingGETParams{

		timeout: timeout,
	}
}

// NewGetDeploymentsUsingGETParamsWithContext creates a new GetDeploymentsUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDeploymentsUsingGETParamsWithContext(ctx context.Context) *GetDeploymentsUsingGETParams {
	var ()
	return &GetDeploymentsUsingGETParams{

		Context: ctx,
	}
}

// NewGetDeploymentsUsingGETParamsWithHTTPClient creates a new GetDeploymentsUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDeploymentsUsingGETParamsWithHTTPClient(client *http.Client) *GetDeploymentsUsingGETParams {
	var ()
	return &GetDeploymentsUsingGETParams{
		HTTPClient: client,
	}
}

/*GetDeploymentsUsingGETParams contains all the parameters to send to the API endpoint
for the get deployments using g e t operation typically these are written to a http.Request
*/
type GetDeploymentsUsingGETParams struct {

	/*ExpandLastRequest
	  Expands deployment last request.

	*/
	ExpandLastRequest *bool
	/*ExpandMetadata
	  Retrieves the 'metadata' field of the resource.

	*/
	ExpandMetadata *bool
	/*ExpandProject
	  The 'project' field of each resulting deployment will be retrieved.

	*/
	ExpandProject *bool
	/*ExpandResources
	  The 'resources' field of each resulting deployment will be retrieved.

	*/
	ExpandResources *bool
	/*ForceCachedResources
	  The 'resources' field of each deployment in the result list will be read from a cache for a faster query.

	*/
	ForceCachedResources *bool
	/*ForceRefreshResources
	  The 'resources' field of each deployment in the result list will be guaranteed up-to-date.

	*/
	ForceRefreshResources *bool
	/*Ids
	  A comma-separated list. Only deployments with these IDs will be included in the results.

	*/
	Ids []strfmt.UUID
	/*Name
	  Results must have exactly this name.

	*/
	Name *string
	/*Page
	  Results page you want to retrieve (0..N)

	*/
	Page *int32
	/*Projects
	  A comma-separated list. Results must be associated with one of these project IDs.

	*/
	Projects []string
	/*Search
	  Results must either have names with this string as a prefix or contain this string in their description.

	*/
	Search *string
	/*Size
	  Number of records per page.

	*/
	Size *int32
	/*Sort
	  Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.

	*/
	Sort []string
	/*Templates
	  A comma-separated list. Results must be associated with one of these templates.

	*/
	Templates []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithTimeout(timeout time.Duration) *GetDeploymentsUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithContext(ctx context.Context) *GetDeploymentsUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithHTTPClient(client *http.Client) *GetDeploymentsUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExpandLastRequest adds the expandLastRequest to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithExpandLastRequest(expandLastRequest *bool) *GetDeploymentsUsingGETParams {
	o.SetExpandLastRequest(expandLastRequest)
	return o
}

// SetExpandLastRequest adds the expandLastRequest to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetExpandLastRequest(expandLastRequest *bool) {
	o.ExpandLastRequest = expandLastRequest
}

// WithExpandMetadata adds the expandMetadata to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithExpandMetadata(expandMetadata *bool) *GetDeploymentsUsingGETParams {
	o.SetExpandMetadata(expandMetadata)
	return o
}

// SetExpandMetadata adds the expandMetadata to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetExpandMetadata(expandMetadata *bool) {
	o.ExpandMetadata = expandMetadata
}

// WithExpandProject adds the expandProject to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithExpandProject(expandProject *bool) *GetDeploymentsUsingGETParams {
	o.SetExpandProject(expandProject)
	return o
}

// SetExpandProject adds the expandProject to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetExpandProject(expandProject *bool) {
	o.ExpandProject = expandProject
}

// WithExpandResources adds the expandResources to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithExpandResources(expandResources *bool) *GetDeploymentsUsingGETParams {
	o.SetExpandResources(expandResources)
	return o
}

// SetExpandResources adds the expandResources to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetExpandResources(expandResources *bool) {
	o.ExpandResources = expandResources
}

// WithForceCachedResources adds the forceCachedResources to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithForceCachedResources(forceCachedResources *bool) *GetDeploymentsUsingGETParams {
	o.SetForceCachedResources(forceCachedResources)
	return o
}

// SetForceCachedResources adds the forceCachedResources to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetForceCachedResources(forceCachedResources *bool) {
	o.ForceCachedResources = forceCachedResources
}

// WithForceRefreshResources adds the forceRefreshResources to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithForceRefreshResources(forceRefreshResources *bool) *GetDeploymentsUsingGETParams {
	o.SetForceRefreshResources(forceRefreshResources)
	return o
}

// SetForceRefreshResources adds the forceRefreshResources to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetForceRefreshResources(forceRefreshResources *bool) {
	o.ForceRefreshResources = forceRefreshResources
}

// WithIds adds the ids to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithIds(ids []strfmt.UUID) *GetDeploymentsUsingGETParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetIds(ids []strfmt.UUID) {
	o.Ids = ids
}

// WithName adds the name to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithName(name *string) *GetDeploymentsUsingGETParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetName(name *string) {
	o.Name = name
}

// WithPage adds the page to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithPage(page *int32) *GetDeploymentsUsingGETParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetPage(page *int32) {
	o.Page = page
}

// WithProjects adds the projects to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithProjects(projects []string) *GetDeploymentsUsingGETParams {
	o.SetProjects(projects)
	return o
}

// SetProjects adds the projects to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetProjects(projects []string) {
	o.Projects = projects
}

// WithSearch adds the search to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithSearch(search *string) *GetDeploymentsUsingGETParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetSearch(search *string) {
	o.Search = search
}

// WithSize adds the size to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithSize(size *int32) *GetDeploymentsUsingGETParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetSize(size *int32) {
	o.Size = size
}

// WithSort adds the sort to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithSort(sort []string) *GetDeploymentsUsingGETParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetSort(sort []string) {
	o.Sort = sort
}

// WithTemplates adds the templates to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithTemplates(templates []string) *GetDeploymentsUsingGETParams {
	o.SetTemplates(templates)
	return o
}

// SetTemplates adds the templates to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetTemplates(templates []string) {
	o.Templates = templates
}

// WriteToRequest writes these params to a swagger request
func (o *GetDeploymentsUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ExpandLastRequest != nil {

		// query param expandLastRequest
		var qrExpandLastRequest bool
		if o.ExpandLastRequest != nil {
			qrExpandLastRequest = *o.ExpandLastRequest
		}
		qExpandLastRequest := swag.FormatBool(qrExpandLastRequest)
		if qExpandLastRequest != "" {
			if err := r.SetQueryParam("expandLastRequest", qExpandLastRequest); err != nil {
				return err
			}
		}

	}

	if o.ExpandMetadata != nil {

		// query param expandMetadata
		var qrExpandMetadata bool
		if o.ExpandMetadata != nil {
			qrExpandMetadata = *o.ExpandMetadata
		}
		qExpandMetadata := swag.FormatBool(qrExpandMetadata)
		if qExpandMetadata != "" {
			if err := r.SetQueryParam("expandMetadata", qExpandMetadata); err != nil {
				return err
			}
		}

	}

	if o.ExpandProject != nil {

		// query param expandProject
		var qrExpandProject bool
		if o.ExpandProject != nil {
			qrExpandProject = *o.ExpandProject
		}
		qExpandProject := swag.FormatBool(qrExpandProject)
		if qExpandProject != "" {
			if err := r.SetQueryParam("expandProject", qExpandProject); err != nil {
				return err
			}
		}

	}

	if o.ExpandResources != nil {

		// query param expandResources
		var qrExpandResources bool
		if o.ExpandResources != nil {
			qrExpandResources = *o.ExpandResources
		}
		qExpandResources := swag.FormatBool(qrExpandResources)
		if qExpandResources != "" {
			if err := r.SetQueryParam("expandResources", qExpandResources); err != nil {
				return err
			}
		}

	}

	if o.ForceCachedResources != nil {

		// query param forceCachedResources
		var qrForceCachedResources bool
		if o.ForceCachedResources != nil {
			qrForceCachedResources = *o.ForceCachedResources
		}
		qForceCachedResources := swag.FormatBool(qrForceCachedResources)
		if qForceCachedResources != "" {
			if err := r.SetQueryParam("forceCachedResources", qForceCachedResources); err != nil {
				return err
			}
		}

	}

	if o.ForceRefreshResources != nil {

		// query param forceRefreshResources
		var qrForceRefreshResources bool
		if o.ForceRefreshResources != nil {
			qrForceRefreshResources = *o.ForceRefreshResources
		}
		qForceRefreshResources := swag.FormatBool(qrForceRefreshResources)
		if qForceRefreshResources != "" {
			if err := r.SetQueryParam("forceRefreshResources", qForceRefreshResources); err != nil {
				return err
			}
		}

	}

	var valuesIds []string
	for _, v := range o.Ids {
		valuesIds = append(valuesIds, v.String())
	}

	joinedIds := swag.JoinByFormat(valuesIds, "multi")
	// query array param ids
	if err := r.SetQueryParam("ids", joinedIds...); err != nil {
		return err
	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int32
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	valuesProjects := o.Projects

	joinedProjects := swag.JoinByFormat(valuesProjects, "multi")
	// query array param projects
	if err := r.SetQueryParam("projects", joinedProjects...); err != nil {
		return err
	}

	if o.Search != nil {

		// query param search
		var qrSearch string
		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {
			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}

	}

	if o.Size != nil {

		// query param size
		var qrSize int32
		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt32(qrSize)
		if qSize != "" {
			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}

	}

	valuesSort := o.Sort

	joinedSort := swag.JoinByFormat(valuesSort, "multi")
	// query array param sort
	if err := r.SetQueryParam("sort", joinedSort...); err != nil {
		return err
	}

	valuesTemplates := o.Templates

	joinedTemplates := swag.JoinByFormat(valuesTemplates, "multi")
	// query array param templates
	if err := r.SetQueryParam("templates", joinedTemplates...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
