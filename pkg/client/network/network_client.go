// Code generated by go-swagger; DO NOT EDIT.

package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new network API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for network API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateNetwork creates network

Provision a new network based on the passed in constraints.  The network should be destroyed after the machine is destroyed to free up resources.
*/
func (a *Client) CreateNetwork(params *CreateNetworkParams) (*CreateNetworkCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNetwork",
		Method:             "POST",
		PathPattern:        "/iaas/api/networks",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateNetworkCreated), nil

}

/*
DeleteNetwork deletes a network

Delete a network.
*/
func (a *Client) DeleteNetwork(params *DeleteNetworkParams) (*DeleteNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNetwork",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/networks/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNetworkOK), nil

}

/*
DescribeNetwork describes a network

Describe a network.
*/
func (a *Client) DescribeNetwork(params *DescribeNetworkParams) (*DescribeNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeNetworkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "describeNetwork",
		Method:             "GET",
		PathPattern:        "/iaas/api/networks/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeNetworkOK), nil

}

/*
DescribeNetworkDomain describes a network domain

Describe a Network Domain.
*/
func (a *Client) DescribeNetworkDomain(params *DescribeNetworkDomainParams) (*DescribeNetworkDomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeNetworkDomainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "describeNetworkDomain",
		Method:             "GET",
		PathPattern:        "/iaas/api/network-domains/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeNetworkDomainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeNetworkDomainOK), nil

}

/*
GetNetworkDomains gets network domains

Get a page of Network Domains.
*/
func (a *Client) GetNetworkDomains(params *GetNetworkDomainsParams) (*GetNetworkDomainsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkDomainsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkDomains",
		Method:             "GET",
		PathPattern:        "/iaas/api/network-domains",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkDomainsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNetworkDomainsOK), nil

}

/*
GetNetworks gets networks

Get a page of network content.
*/
func (a *Client) GetNetworks(params *GetNetworksParams) (*GetNetworksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworks",
		Method:             "GET",
		PathPattern:        "/iaas/api/networks",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNetworksOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
