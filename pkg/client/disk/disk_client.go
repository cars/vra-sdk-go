// Code generated by go-swagger; DO NOT EDIT.

package disk

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new disk API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for disk API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateBlockDevice creates block device

Following disk custom properties can be passed while creating a block device:

    1. dataStore: Defines name of the datastore in which the disk has to be provisioned.
    2. storagePolicy: Defines name of the storage policy in which the disk has to be provisioned. If name of the datastore is specified in the custom properties then, datastore takes precedence.
    3. provisioningType: Defines the type of provisioning. For eg. thick/thin.
*/
func (a *Client) CreateBlockDevice(params *CreateBlockDeviceParams) (*CreateBlockDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBlockDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createBlockDevice",
		Method:             "POST",
		PathPattern:        "/iaas/api/block-devices",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateBlockDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateBlockDeviceOK), nil

}

/*
DeleteBlockDevice deletes a block device

Delete a BlockDevice
*/
func (a *Client) DeleteBlockDevice(params *DeleteBlockDeviceParams) (*DeleteBlockDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBlockDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteBlockDevice",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/block-devices/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBlockDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteBlockDeviceOK), nil

}

/*
GetBlockDevice gets block device

Get a single BlockDevice
*/
func (a *Client) GetBlockDevice(params *GetBlockDeviceParams) (*GetBlockDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlockDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBlockDevice",
		Method:             "GET",
		PathPattern:        "/iaas/api/block-devices/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBlockDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBlockDeviceOK), nil

}

/*
GetBlockDevices gets block devices

Get all BlockDevices
*/
func (a *Client) GetBlockDevices(params *GetBlockDevicesParams) (*GetBlockDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlockDevicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBlockDevices",
		Method:             "GET",
		PathPattern:        "/iaas/api/block-devices",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBlockDevicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBlockDevicesOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
