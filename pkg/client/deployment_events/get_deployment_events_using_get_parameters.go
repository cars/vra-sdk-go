// Code generated by go-swagger; DO NOT EDIT.

package deployment_events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDeploymentEventsUsingGETParams creates a new GetDeploymentEventsUsingGETParams object
// with the default values initialized.
func NewGetDeploymentEventsUsingGETParams() *GetDeploymentEventsUsingGETParams {
	var ()
	return &GetDeploymentEventsUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDeploymentEventsUsingGETParamsWithTimeout creates a new GetDeploymentEventsUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDeploymentEventsUsingGETParamsWithTimeout(timeout time.Duration) *GetDeploymentEventsUsingGETParams {
	var ()
	return &GetDeploymentEventsUsingGETParams{

		timeout: timeout,
	}
}

// NewGetDeploymentEventsUsingGETParamsWithContext creates a new GetDeploymentEventsUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDeploymentEventsUsingGETParamsWithContext(ctx context.Context) *GetDeploymentEventsUsingGETParams {
	var ()
	return &GetDeploymentEventsUsingGETParams{

		Context: ctx,
	}
}

// NewGetDeploymentEventsUsingGETParamsWithHTTPClient creates a new GetDeploymentEventsUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDeploymentEventsUsingGETParamsWithHTTPClient(client *http.Client) *GetDeploymentEventsUsingGETParams {
	var ()
	return &GetDeploymentEventsUsingGETParams{
		HTTPClient: client,
	}
}

/*GetDeploymentEventsUsingGETParams contains all the parameters to send to the API endpoint
for the get deployment events using g e t operation typically these are written to a http.Request
*/
type GetDeploymentEventsUsingGETParams struct {

	/*DepID
	  Deployment ID

	*/
	DepID strfmt.UUID
	/*Page
	  Results page you want to retrieve (0..N)

	*/
	Page *int32
	/*ParentID
	  Parent Event Id

	*/
	ParentID *strfmt.UUID
	/*Size
	  Number of records per page.

	*/
	Size *int32
	/*Sort
	  Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.

	*/
	Sort []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get deployment events using get params
func (o *GetDeploymentEventsUsingGETParams) WithTimeout(timeout time.Duration) *GetDeploymentEventsUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get deployment events using get params
func (o *GetDeploymentEventsUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get deployment events using get params
func (o *GetDeploymentEventsUsingGETParams) WithContext(ctx context.Context) *GetDeploymentEventsUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get deployment events using get params
func (o *GetDeploymentEventsUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get deployment events using get params
func (o *GetDeploymentEventsUsingGETParams) WithHTTPClient(client *http.Client) *GetDeploymentEventsUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get deployment events using get params
func (o *GetDeploymentEventsUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDepID adds the depID to the get deployment events using get params
func (o *GetDeploymentEventsUsingGETParams) WithDepID(depID strfmt.UUID) *GetDeploymentEventsUsingGETParams {
	o.SetDepID(depID)
	return o
}

// SetDepID adds the depId to the get deployment events using get params
func (o *GetDeploymentEventsUsingGETParams) SetDepID(depID strfmt.UUID) {
	o.DepID = depID
}

// WithPage adds the page to the get deployment events using get params
func (o *GetDeploymentEventsUsingGETParams) WithPage(page *int32) *GetDeploymentEventsUsingGETParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get deployment events using get params
func (o *GetDeploymentEventsUsingGETParams) SetPage(page *int32) {
	o.Page = page
}

// WithParentID adds the parentID to the get deployment events using get params
func (o *GetDeploymentEventsUsingGETParams) WithParentID(parentID *strfmt.UUID) *GetDeploymentEventsUsingGETParams {
	o.SetParentID(parentID)
	return o
}

// SetParentID adds the parentId to the get deployment events using get params
func (o *GetDeploymentEventsUsingGETParams) SetParentID(parentID *strfmt.UUID) {
	o.ParentID = parentID
}

// WithSize adds the size to the get deployment events using get params
func (o *GetDeploymentEventsUsingGETParams) WithSize(size *int32) *GetDeploymentEventsUsingGETParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the get deployment events using get params
func (o *GetDeploymentEventsUsingGETParams) SetSize(size *int32) {
	o.Size = size
}

// WithSort adds the sort to the get deployment events using get params
func (o *GetDeploymentEventsUsingGETParams) WithSort(sort []string) *GetDeploymentEventsUsingGETParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get deployment events using get params
func (o *GetDeploymentEventsUsingGETParams) SetSort(sort []string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *GetDeploymentEventsUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param depId
	if err := r.SetPathParam("depId", o.DepID.String()); err != nil {
		return err
	}

	if o.Page != nil {

		// query param page
		var qrPage int32
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.ParentID != nil {

		// query param parentId
		var qrParentID strfmt.UUID
		if o.ParentID != nil {
			qrParentID = *o.ParentID
		}
		qParentID := qrParentID.String()
		if qParentID != "" {
			if err := r.SetQueryParam("parentId", qParentID); err != nil {
				return err
			}
		}

	}

	if o.Size != nil {

		// query param size
		var qrSize int32
		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt32(qrSize)
		if qSize != "" {
			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}

	}

	valuesSort := o.Sort

	joinedSort := swag.JoinByFormat(valuesSort, "multi")
	// query array param sort
	if err := r.SetQueryParam("sort", joinedSort...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
