// Code generated by go-swagger; DO NOT EDIT.

package provider_resource_types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetProviderResourceTypeUsingGETParams creates a new GetProviderResourceTypeUsingGETParams object
// with the default values initialized.
func NewGetProviderResourceTypeUsingGETParams() *GetProviderResourceTypeUsingGETParams {
	var ()
	return &GetProviderResourceTypeUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetProviderResourceTypeUsingGETParamsWithTimeout creates a new GetProviderResourceTypeUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetProviderResourceTypeUsingGETParamsWithTimeout(timeout time.Duration) *GetProviderResourceTypeUsingGETParams {
	var ()
	return &GetProviderResourceTypeUsingGETParams{

		timeout: timeout,
	}
}

// NewGetProviderResourceTypeUsingGETParamsWithContext creates a new GetProviderResourceTypeUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetProviderResourceTypeUsingGETParamsWithContext(ctx context.Context) *GetProviderResourceTypeUsingGETParams {
	var ()
	return &GetProviderResourceTypeUsingGETParams{

		Context: ctx,
	}
}

// NewGetProviderResourceTypeUsingGETParamsWithHTTPClient creates a new GetProviderResourceTypeUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetProviderResourceTypeUsingGETParamsWithHTTPClient(client *http.Client) *GetProviderResourceTypeUsingGETParams {
	var ()
	return &GetProviderResourceTypeUsingGETParams{
		HTTPClient: client,
	}
}

/*GetProviderResourceTypeUsingGETParams contains all the parameters to send to the API endpoint
for the get provider resource type using g e t operation typically these are written to a http.Request
*/
type GetProviderResourceTypeUsingGETParams struct {

	/*ResourceTypeID
	  resourceTypeId

	*/
	ResourceTypeID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get provider resource type using g e t params
func (o *GetProviderResourceTypeUsingGETParams) WithTimeout(timeout time.Duration) *GetProviderResourceTypeUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get provider resource type using g e t params
func (o *GetProviderResourceTypeUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get provider resource type using g e t params
func (o *GetProviderResourceTypeUsingGETParams) WithContext(ctx context.Context) *GetProviderResourceTypeUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get provider resource type using g e t params
func (o *GetProviderResourceTypeUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get provider resource type using g e t params
func (o *GetProviderResourceTypeUsingGETParams) WithHTTPClient(client *http.Client) *GetProviderResourceTypeUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get provider resource type using g e t params
func (o *GetProviderResourceTypeUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithResourceTypeID adds the resourceTypeID to the get provider resource type using g e t params
func (o *GetProviderResourceTypeUsingGETParams) WithResourceTypeID(resourceTypeID strfmt.UUID) *GetProviderResourceTypeUsingGETParams {
	o.SetResourceTypeID(resourceTypeID)
	return o
}

// SetResourceTypeID adds the resourceTypeId to the get provider resource type using g e t params
func (o *GetProviderResourceTypeUsingGETParams) SetResourceTypeID(resourceTypeID strfmt.UUID) {
	o.ResourceTypeID = resourceTypeID
}

// WriteToRequest writes these params to a swagger request
func (o *GetProviderResourceTypeUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param resourceTypeId
	if err := r.SetPathParam("resourceTypeId", o.ResourceTypeID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
