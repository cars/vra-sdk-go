// Code generated by go-swagger; DO NOT EDIT.

package blueprint_requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new blueprint requests API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for blueprint requests API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ActionBlueprintRequestUsingPOST sends action to request
*/
func (a *Client) ActionBlueprintRequestUsingPOST(params *ActionBlueprintRequestUsingPOSTParams) (*ActionBlueprintRequestUsingPOSTOK, *ActionBlueprintRequestUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionBlueprintRequestUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "actionBlueprintRequestUsingPOST",
		Method:             "POST",
		PathPattern:        "/blueprint/api/blueprint-requests/{requestId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActionBlueprintRequestUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ActionBlueprintRequestUsingPOSTOK:
		return value, nil, nil
	case *ActionBlueprintRequestUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for blueprint_requests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateBlueprintRequestUsingPOST creates a blueprint request
*/
func (a *Client) CreateBlueprintRequestUsingPOST(params *CreateBlueprintRequestUsingPOSTParams) (*CreateBlueprintRequestUsingPOSTOK, *CreateBlueprintRequestUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBlueprintRequestUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createBlueprintRequestUsingPOST",
		Method:             "POST",
		PathPattern:        "/blueprint/api/blueprint-requests",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateBlueprintRequestUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateBlueprintRequestUsingPOSTOK:
		return value, nil, nil
	case *CreateBlueprintRequestUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for blueprint_requests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteBlueprintRequestUsingDELETE deletes request
*/
func (a *Client) DeleteBlueprintRequestUsingDELETE(params *DeleteBlueprintRequestUsingDELETEParams) (*DeleteBlueprintRequestUsingDELETEOK, *DeleteBlueprintRequestUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBlueprintRequestUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteBlueprintRequestUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/blueprint/api/blueprint-requests/{requestId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBlueprintRequestUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteBlueprintRequestUsingDELETEOK:
		return value, nil, nil
	case *DeleteBlueprintRequestUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for blueprint_requests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBlueprintPlanUsingGET returns request plan
*/
func (a *Client) GetBlueprintPlanUsingGET(params *GetBlueprintPlanUsingGETParams) (*GetBlueprintPlanUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlueprintPlanUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBlueprintPlanUsingGET",
		Method:             "GET",
		PathPattern:        "/blueprint/api/blueprint-requests/{requestId}/plan",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBlueprintPlanUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBlueprintPlanUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBlueprintPlanUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBlueprintRequestUsingGET returns blueprint request details
*/
func (a *Client) GetBlueprintRequestUsingGET(params *GetBlueprintRequestUsingGETParams) (*GetBlueprintRequestUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlueprintRequestUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBlueprintRequestUsingGET",
		Method:             "GET",
		PathPattern:        "/blueprint/api/blueprint-requests/{requestId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBlueprintRequestUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBlueprintRequestUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBlueprintRequestUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBlueprintResourcesPlanUsingGET returns request resources plan
*/
func (a *Client) GetBlueprintResourcesPlanUsingGET(params *GetBlueprintResourcesPlanUsingGETParams) (*GetBlueprintResourcesPlanUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlueprintResourcesPlanUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBlueprintResourcesPlanUsingGET",
		Method:             "GET",
		PathPattern:        "/blueprint/api/blueprint-requests/{requestId}/resources-plan",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBlueprintResourcesPlanUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBlueprintResourcesPlanUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBlueprintResourcesPlanUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListBlueprintRequestsUsingGET lists blueprint requests
*/
func (a *Client) ListBlueprintRequestsUsingGET(params *ListBlueprintRequestsUsingGETParams) (*ListBlueprintRequestsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBlueprintRequestsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listBlueprintRequestsUsingGET",
		Method:             "GET",
		PathPattern:        "/blueprint/api/blueprint-requests",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListBlueprintRequestsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListBlueprintRequestsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listBlueprintRequestsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
