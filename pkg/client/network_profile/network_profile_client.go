// Code generated by go-swagger; DO NOT EDIT.

package network_profile

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new network profile API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for network profile API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateNetworkProfile creates network profile

Create network profile
*/
func (a *Client) CreateNetworkProfile(params *CreateNetworkProfileParams) (*CreateNetworkProfileCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNetworkProfile",
		Method:             "POST",
		PathPattern:        "/iaas/api/network-profiles",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateNetworkProfileCreated), nil

}

/*
DeleteNetworkProfile deletes network profile

Delete network profile with a given id
*/
func (a *Client) DeleteNetworkProfile(params *DeleteNetworkProfileParams) (*DeleteNetworkProfileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNetworkProfile",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/network-profiles/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNetworkProfileNoContent), nil

}

/*
GetNetworkProfile gets network profile

Get network profile with a given id
*/
func (a *Client) GetNetworkProfile(params *GetNetworkProfileParams) (*GetNetworkProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkProfile",
		Method:             "GET",
		PathPattern:        "/iaas/api/network-profiles/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNetworkProfileOK), nil

}

/*
GetNetworkProfiles gets network profiles

Get all network profiles
*/
func (a *Client) GetNetworkProfiles(params *GetNetworkProfilesParams) (*GetNetworkProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkProfiles",
		Method:             "GET",
		PathPattern:        "/iaas/api/network-profiles",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkProfilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNetworkProfilesOK), nil

}

/*
UpdateNetworkProfile updates network profile

Update network profile
*/
func (a *Client) UpdateNetworkProfile(params *UpdateNetworkProfileParams) (*UpdateNetworkProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkProfile",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/network-profiles/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateNetworkProfileOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
