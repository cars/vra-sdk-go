// Code generated by go-swagger; DO NOT EDIT.

package compute_nat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// ReconfigureNatReader is a Reader for the ReconfigureNat structure.
type ReconfigureNatReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReconfigureNatReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewReconfigureNatAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReconfigureNatBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReconfigureNatForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewReconfigureNatAccepted creates a ReconfigureNatAccepted with default headers values
func NewReconfigureNatAccepted() *ReconfigureNatAccepted {
	return &ReconfigureNatAccepted{}
}

/* ReconfigureNatAccepted describes a response with status code 202, with default header values.

successful operation
*/
type ReconfigureNatAccepted struct {
	Payload *models.RequestTracker
}

func (o *ReconfigureNatAccepted) Error() string {
	return fmt.Sprintf("[POST /iaas/api/compute-nats/{id}/operations/reconfigure][%d] reconfigureNatAccepted  %+v", 202, o.Payload)
}
func (o *ReconfigureNatAccepted) GetPayload() *models.RequestTracker {
	return o.Payload
}

func (o *ReconfigureNatAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RequestTracker)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReconfigureNatBadRequest creates a ReconfigureNatBadRequest with default headers values
func NewReconfigureNatBadRequest() *ReconfigureNatBadRequest {
	return &ReconfigureNatBadRequest{}
}

/* ReconfigureNatBadRequest describes a response with status code 400, with default header values.

NAT rules cannot be null
*/
type ReconfigureNatBadRequest struct {
	Payload *models.Error
}

func (o *ReconfigureNatBadRequest) Error() string {
	return fmt.Sprintf("[POST /iaas/api/compute-nats/{id}/operations/reconfigure][%d] reconfigureNatBadRequest  %+v", 400, o.Payload)
}
func (o *ReconfigureNatBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ReconfigureNatBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReconfigureNatForbidden creates a ReconfigureNatForbidden with default headers values
func NewReconfigureNatForbidden() *ReconfigureNatForbidden {
	return &ReconfigureNatForbidden{}
}

/* ReconfigureNatForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ReconfigureNatForbidden struct {
	Payload *models.ServiceErrorResponse
}

func (o *ReconfigureNatForbidden) Error() string {
	return fmt.Sprintf("[POST /iaas/api/compute-nats/{id}/operations/reconfigure][%d] reconfigureNatForbidden  %+v", 403, o.Payload)
}
func (o *ReconfigureNatForbidden) GetPayload() *models.ServiceErrorResponse {
	return o.Payload
}

func (o *ReconfigureNatForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
