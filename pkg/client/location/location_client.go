// Code generated by go-swagger; DO NOT EDIT.

package location

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new location API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for location API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateZone creates zone

Create a new Zone.
*/
func (a *Client) CreateZone(params *CreateZoneParams) (*CreateZoneCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createZone",
		Method:             "POST",
		PathPattern:        "/iaas/api/zones",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateZoneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateZoneCreated), nil

}

/*
DeleteZone deletes a zone

Delete a Zone
*/
func (a *Client) DeleteZone(params *DeleteZoneParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteZoneParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteZone",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/zones/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteZoneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetRegion gets region

Get all regions.
*/
func (a *Client) GetRegion(params *GetRegionParams) (*GetRegionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRegion",
		Method:             "GET",
		PathPattern:        "/iaas/api/regions",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRegionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRegionOK), nil

}

/*
GetSingleRegion gets a single region

Get a single Region.
*/
func (a *Client) GetSingleRegion(params *GetSingleRegionParams) (*GetSingleRegionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSingleRegionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSingleRegion",
		Method:             "GET",
		PathPattern:        "/iaas/api/regions/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSingleRegionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSingleRegionOK), nil

}

/*
GetSingleZone gets a single zone

Get a single Zone.
*/
func (a *Client) GetSingleZone(params *GetSingleZoneParams) (*GetSingleZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSingleZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSingleZone",
		Method:             "GET",
		PathPattern:        "/iaas/api/zones/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSingleZoneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSingleZoneOK), nil

}

/*
GetZone gets zone

Get all zones
*/
func (a *Client) GetZone(params *GetZoneParams) (*GetZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getZone",
		Method:             "GET",
		PathPattern:        "/iaas/api/zones",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetZoneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetZoneOK), nil

}

/*
UpdateZone updates zone

Update a Zone.
*/
func (a *Client) UpdateZone(params *UpdateZoneParams) (*UpdateZoneCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateZone",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/zones/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateZoneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateZoneCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
