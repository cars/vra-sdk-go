// Code generated by go-swagger; DO NOT EDIT.

package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new compute API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for compute API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateMachine creates machine

Create a new Machine.
*/
func (a *Client) CreateMachine(params *CreateMachineParams) (*CreateMachineCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMachineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMachine",
		Method:             "POST",
		PathPattern:        "/iaas/api/machines",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateMachineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMachineCreated), nil

}

/*
DeleteMachine deletes a machine

Delete a Machine.
*/
func (a *Client) DeleteMachine(params *DeleteMachineParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMachineParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMachine",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/machines/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMachineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DescribeMachine describes a machine

Describe a Machine.
*/
func (a *Client) DescribeMachine(params *DescribeMachineParams) (*DescribeMachineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeMachineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "describeMachine",
		Method:             "GET",
		PathPattern:        "/iaas/api/machines/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeMachineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeMachineOK), nil

}

/*
GetMachines gets machines

Get all Machines.
*/
func (a *Client) GetMachines(params *GetMachinesParams) (*GetMachinesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMachinesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMachines",
		Method:             "GET",
		PathPattern:        "/iaas/api/machines",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMachinesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMachinesOK), nil

}

/*
GetSnapshotsForMachine gets snapshots information for machine

Get Snapshots information for machine
*/
func (a *Client) GetSnapshotsForMachine(params *GetSnapshotsForMachineParams) (*GetSnapshotsForMachineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnapshotsForMachineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSnapshotsForMachine",
		Method:             "GET",
		PathPattern:        "/iaas/api/machines/{id}/snapshots",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnapshotsForMachineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSnapshotsForMachineOK), nil

}

/*
MachineCreateSnapshotOperation creates snapshot of machine

Create Snapshot of Machine
*/
func (a *Client) MachineCreateSnapshotOperation(params *MachineCreateSnapshotOperationParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachineCreateSnapshotOperationParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "machineCreateSnapshotOperation",
		Method:             "POST",
		PathPattern:        "/iaas/api/machines/{id}/operations/snapshots",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachineCreateSnapshotOperationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
MachineDeleteSnapshotOperation deletes a snapshot

Delete a Snapshot
*/
func (a *Client) MachineDeleteSnapshotOperation(params *MachineDeleteSnapshotOperationParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachineDeleteSnapshotOperationParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "machineDeleteSnapshotOperation",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/machines/{id}/snapshots/{id1}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachineDeleteSnapshotOperationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
MachinePowerOffOperation powers off a machine

Power-off a Machine
*/
func (a *Client) MachinePowerOffOperation(params *MachinePowerOffOperationParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachinePowerOffOperationParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "machinePowerOffOperation",
		Method:             "POST",
		PathPattern:        "/iaas/api/machines/{id}/operations/power-off",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachinePowerOffOperationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
MachinePowerOnOperation powers on a machine

Power-on a Machine.
*/
func (a *Client) MachinePowerOnOperation(params *MachinePowerOnOperationParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachinePowerOnOperationParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "machinePowerOnOperation",
		Method:             "POST",
		PathPattern:        "/iaas/api/machines/{id}/operations/power-on",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachinePowerOnOperationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
MachineRebootOperation reboots a machine

Reboot a Machine
*/
func (a *Client) MachineRebootOperation(params *MachineRebootOperationParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachineRebootOperationParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "machineRebootOperation",
		Method:             "POST",
		PathPattern:        "/iaas/api/machines/{id}/operations/reboot",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachineRebootOperationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
MachineResetOperation resets a machine

Reset a Machine
*/
func (a *Client) MachineResetOperation(params *MachineResetOperationParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachineResetOperationParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "machineResetOperation",
		Method:             "POST",
		PathPattern:        "/iaas/api/machines/{id}/operations/reset",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachineResetOperationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
MachineResizeOperation resizes a machine

Resize a Machine
*/
func (a *Client) MachineResizeOperation(params *MachineResizeOperationParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachineResizeOperationParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "machineResizeOperation",
		Method:             "POST",
		PathPattern:        "/iaas/api/machines/{id}/operations/resize",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachineResizeOperationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
MachineRestartOperation restarts a machine

Restart a Machine
*/
func (a *Client) MachineRestartOperation(params *MachineRestartOperationParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachineRestartOperationParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "machineRestartOperation",
		Method:             "POST",
		PathPattern:        "/iaas/api/machines/{id}/operations/restart",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachineRestartOperationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
MachineRevertSnapshotOperation reverts to a snapshot of machine

Revert to a Snapshot of Machine
*/
func (a *Client) MachineRevertSnapshotOperation(params *MachineRevertSnapshotOperationParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachineRevertSnapshotOperationParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "machineRevertSnapshotOperation",
		Method:             "POST",
		PathPattern:        "/iaas/api/machines/{id}/operations/revert",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachineRevertSnapshotOperationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
MachineShutdownOperation shuts down a machine

Shut down a Machine
*/
func (a *Client) MachineShutdownOperation(params *MachineShutdownOperationParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachineShutdownOperationParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "machineShutdownOperation",
		Method:             "POST",
		PathPattern:        "/iaas/api/machines/{id}/operations/shutdown",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachineShutdownOperationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
MachineSuspendOperation suspends a machine

Suspend a Machine
*/
func (a *Client) MachineSuspendOperation(params *MachineSuspendOperationParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachineSuspendOperationParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "machineSuspendOperation",
		Method:             "POST",
		PathPattern:        "/iaas/api/machines/{id}/operations/suspend",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachineSuspendOperationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
UpdateMachine updates a machine

Update a Machine. Only tag updates are supported. All other properties in the MachineSpecification body are ignored.
*/
func (a *Client) UpdateMachine(params *UpdateMachineParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMachineParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateMachine",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/machines/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMachineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
