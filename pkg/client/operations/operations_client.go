// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AttachMachineDisk attaches machine disk

Attach a disk to a machine.
*/
func (a *Client) AttachMachineDisk(params *AttachMachineDiskParams) (*AttachMachineDiskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAttachMachineDiskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "attachMachineDisk",
		Method:             "POST",
		PathPattern:        "/iaas/api/machines/{id}/disks",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AttachMachineDiskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AttachMachineDiskOK), nil

}

/*
DeleteMachineDisk deletes machine disk

Remove a disk from a given machine.
*/
func (a *Client) DeleteMachineDisk(params *DeleteMachineDiskParams) (*DeleteMachineDiskAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMachineDiskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMachineDisk",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/machines/{id}/disks/{id1}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMachineDiskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMachineDiskAccepted), nil

}

/*
GetMachineDisk gets a machine disk

Get disk with a given id for specific machine
*/
func (a *Client) GetMachineDisk(params *GetMachineDiskParams) (*GetMachineDiskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMachineDiskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMachineDisk",
		Method:             "GET",
		PathPattern:        "/iaas/api/machines/{id}/disks/{id1}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMachineDiskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMachineDiskOK), nil

}

/*
GetMachineDisks gets machine disks

Get all machine disks
*/
func (a *Client) GetMachineDisks(params *GetMachineDisksParams) (*GetMachineDisksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMachineDisksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMachineDisks",
		Method:             "GET",
		PathPattern:        "/iaas/api/machines/{id}/disks",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMachineDisksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMachineDisksOK), nil

}

/*
GetMachineNetworkInterface gets machine network interface

Get network interface with a given id for specific machine
*/
func (a *Client) GetMachineNetworkInterface(params *GetMachineNetworkInterfaceParams) (*GetMachineNetworkInterfaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMachineNetworkInterfaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMachineNetworkInterface",
		Method:             "GET",
		PathPattern:        "/iaas/api/machines/{id}/network-interfaces/{id1}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMachineNetworkInterfaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMachineNetworkInterfaceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
