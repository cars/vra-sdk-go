// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/cas-sdk-go/pkg/models"
)

// AddMachineDiskReader is a Reader for the AddMachineDisk structure.
type AddMachineDiskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddMachineDiskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAddMachineDiskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAddMachineDiskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewAddMachineDiskForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewAddMachineDiskNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddMachineDiskOK creates a AddMachineDiskOK with default headers values
func NewAddMachineDiskOK() *AddMachineDiskOK {
	return &AddMachineDiskOK{}
}

/*AddMachineDiskOK handles this case with default header values.

successful operation
*/
type AddMachineDiskOK struct {
	Payload *models.BlockDevice
}

func (o *AddMachineDiskOK) Error() string {
	return fmt.Sprintf("[POST /iaas/api/machines/{id}/disks][%d] addMachineDiskOK  %+v", 200, o.Payload)
}

func (o *AddMachineDiskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BlockDevice)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddMachineDiskBadRequest creates a AddMachineDiskBadRequest with default headers values
func NewAddMachineDiskBadRequest() *AddMachineDiskBadRequest {
	return &AddMachineDiskBadRequest{}
}

/*AddMachineDiskBadRequest handles this case with default header values.

Invalid Request - bad data
*/
type AddMachineDiskBadRequest struct {
}

func (o *AddMachineDiskBadRequest) Error() string {
	return fmt.Sprintf("[POST /iaas/api/machines/{id}/disks][%d] addMachineDiskBadRequest ", 400)
}

func (o *AddMachineDiskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddMachineDiskForbidden creates a AddMachineDiskForbidden with default headers values
func NewAddMachineDiskForbidden() *AddMachineDiskForbidden {
	return &AddMachineDiskForbidden{}
}

/*AddMachineDiskForbidden handles this case with default header values.

Forbidden
*/
type AddMachineDiskForbidden struct {
}

func (o *AddMachineDiskForbidden) Error() string {
	return fmt.Sprintf("[POST /iaas/api/machines/{id}/disks][%d] addMachineDiskForbidden ", 403)
}

func (o *AddMachineDiskForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddMachineDiskNotFound creates a AddMachineDiskNotFound with default headers values
func NewAddMachineDiskNotFound() *AddMachineDiskNotFound {
	return &AddMachineDiskNotFound{}
}

/*AddMachineDiskNotFound handles this case with default header values.

Not Found
*/
type AddMachineDiskNotFound struct {
}

func (o *AddMachineDiskNotFound) Error() string {
	return fmt.Sprintf("[POST /iaas/api/machines/{id}/disks][%d] addMachineDiskNotFound ", 404)
}

func (o *AddMachineDiskNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
