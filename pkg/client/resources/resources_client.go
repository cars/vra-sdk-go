// Code generated by go-swagger; DO NOT EDIT.

package resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new resources API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for resources API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetResourceByIDUsingGET1(params *GetResourceByIDUsingGET1Params, opts ...ClientOption) (*GetResourceByIDUsingGET1OK, error)

	GetResourceFilterByIDUsingGET(params *GetResourceFilterByIDUsingGETParams, opts ...ClientOption) (*GetResourceFilterByIDUsingGETOK, error)

	GetResourceFiltersUsingGET(params *GetResourceFiltersUsingGETParams, opts ...ClientOption) (*GetResourceFiltersUsingGETOK, error)

	GetResourcesUsingGET(params *GetResourcesUsingGETParams, opts ...ClientOption) (*GetResourcesUsingGETOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetResourceByIDUsingGET1 fetches a specific resource

  Returns the resource with the supplied ID.
*/
func (a *Client) GetResourceByIDUsingGET1(params *GetResourceByIDUsingGET1Params, opts ...ClientOption) (*GetResourceByIDUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceByIDUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceByIdUsingGET_1",
		Method:             "GET",
		PathPattern:        "/deployment/api/resources/{resourceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourceByIDUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceByIDUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceByIdUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetResourceFilterByIDUsingGET returns the resource filter with the supplied ID
*/
func (a *Client) GetResourceFilterByIDUsingGET(params *GetResourceFilterByIDUsingGETParams, opts ...ClientOption) (*GetResourceFilterByIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceFilterByIDUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceFilterByIdUsingGET",
		Method:             "GET",
		PathPattern:        "/deployment/api/resources/filters/{filterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourceFilterByIDUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceFilterByIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceFilterByIdUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetResourceFiltersUsingGET returns the resource filters in context of given user
*/
func (a *Client) GetResourceFiltersUsingGET(params *GetResourceFiltersUsingGETParams, opts ...ClientOption) (*GetResourceFiltersUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceFiltersUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceFiltersUsingGET",
		Method:             "GET",
		PathPattern:        "/deployment/api/resources/filters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourceFiltersUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceFiltersUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceFiltersUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetResourcesUsingGET fetches all resources

  Returns a paginated list of resources.
*/
func (a *Client) GetResourcesUsingGET(params *GetResourcesUsingGETParams, opts ...ClientOption) (*GetResourcesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourcesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourcesUsingGET",
		Method:             "GET",
		PathPattern:        "/deployment/api/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourcesUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourcesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourcesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
