// Code generated by go-swagger; DO NOT EDIT.

package resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetResourcesUsingGETParams creates a new GetResourcesUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetResourcesUsingGETParams() *GetResourcesUsingGETParams {
	return &GetResourcesUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetResourcesUsingGETParamsWithTimeout creates a new GetResourcesUsingGETParams object
// with the ability to set a timeout on a request.
func NewGetResourcesUsingGETParamsWithTimeout(timeout time.Duration) *GetResourcesUsingGETParams {
	return &GetResourcesUsingGETParams{
		timeout: timeout,
	}
}

// NewGetResourcesUsingGETParamsWithContext creates a new GetResourcesUsingGETParams object
// with the ability to set a context for a request.
func NewGetResourcesUsingGETParamsWithContext(ctx context.Context) *GetResourcesUsingGETParams {
	return &GetResourcesUsingGETParams{
		Context: ctx,
	}
}

// NewGetResourcesUsingGETParamsWithHTTPClient creates a new GetResourcesUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetResourcesUsingGETParamsWithHTTPClient(client *http.Client) *GetResourcesUsingGETParams {
	return &GetResourcesUsingGETParams{
		HTTPClient: client,
	}
}

/* GetResourcesUsingGETParams contains all the parameters to send to the API endpoint
   for the get resources using g e t operation.

   Typically these are written to a http.Request.
*/
type GetResourcesUsingGETParams struct {

	/* DollarOrderby.

	   Sorting criteria in the format: property (asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
	*/
	DollarOrderby []string

	/* DollarSkip.

	   Number of records you want to skip

	   Format: int32
	*/
	DollarSkip *int32

	/* DollarTop.

	   Number of records you want

	   Format: int32
	*/
	DollarTop *int32

	/* APIVersion.

	   The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.
	*/
	APIVersion *string

	/* CloudAccounts.

	   A comma-separated list. Results must be associated with one of these cloud accounts.
	*/
	CloudAccounts []string

	/* CloudTypes.

	   A comma-separated list. Results must be associated with one of these cloud Types
	*/
	CloudTypes []string

	/* Expand.

	   The expanded details of the requested comma separated objects. Ex. project, deployment, currentRequest
	*/
	Expand []string

	/* Projects.

	   A comma-separated list. Results must be associated with one of these project IDs.
	*/
	Projects []string

	/* ResourceTypes.

	   A comma-separated list. Results must be associated with one of these resourceType Names.
	*/
	ResourceTypes []string

	/* Search.

	   Given string should be part of a searchable field in one of the resources.
	*/
	Search *string

	/* Tags.

	   A comma-separated list. Results must be associated with one of these tags
	*/
	Tags []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get resources using get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetResourcesUsingGETParams) WithDefaults() *GetResourcesUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get resources using get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetResourcesUsingGETParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get resources using get params
func (o *GetResourcesUsingGETParams) WithTimeout(timeout time.Duration) *GetResourcesUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get resources using get params
func (o *GetResourcesUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get resources using get params
func (o *GetResourcesUsingGETParams) WithContext(ctx context.Context) *GetResourcesUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get resources using get params
func (o *GetResourcesUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get resources using get params
func (o *GetResourcesUsingGETParams) WithHTTPClient(client *http.Client) *GetResourcesUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get resources using get params
func (o *GetResourcesUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDollarOrderby adds the dollarOrderby to the get resources using get params
func (o *GetResourcesUsingGETParams) WithDollarOrderby(dollarOrderby []string) *GetResourcesUsingGETParams {
	o.SetDollarOrderby(dollarOrderby)
	return o
}

// SetDollarOrderby adds the dollarOrderby to the get resources using get params
func (o *GetResourcesUsingGETParams) SetDollarOrderby(dollarOrderby []string) {
	o.DollarOrderby = dollarOrderby
}

// WithDollarSkip adds the dollarSkip to the get resources using get params
func (o *GetResourcesUsingGETParams) WithDollarSkip(dollarSkip *int32) *GetResourcesUsingGETParams {
	o.SetDollarSkip(dollarSkip)
	return o
}

// SetDollarSkip adds the dollarSkip to the get resources using get params
func (o *GetResourcesUsingGETParams) SetDollarSkip(dollarSkip *int32) {
	o.DollarSkip = dollarSkip
}

// WithDollarTop adds the dollarTop to the get resources using get params
func (o *GetResourcesUsingGETParams) WithDollarTop(dollarTop *int32) *GetResourcesUsingGETParams {
	o.SetDollarTop(dollarTop)
	return o
}

// SetDollarTop adds the dollarTop to the get resources using get params
func (o *GetResourcesUsingGETParams) SetDollarTop(dollarTop *int32) {
	o.DollarTop = dollarTop
}

// WithAPIVersion adds the aPIVersion to the get resources using get params
func (o *GetResourcesUsingGETParams) WithAPIVersion(aPIVersion *string) *GetResourcesUsingGETParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the get resources using get params
func (o *GetResourcesUsingGETParams) SetAPIVersion(aPIVersion *string) {
	o.APIVersion = aPIVersion
}

// WithCloudAccounts adds the cloudAccounts to the get resources using get params
func (o *GetResourcesUsingGETParams) WithCloudAccounts(cloudAccounts []string) *GetResourcesUsingGETParams {
	o.SetCloudAccounts(cloudAccounts)
	return o
}

// SetCloudAccounts adds the cloudAccounts to the get resources using get params
func (o *GetResourcesUsingGETParams) SetCloudAccounts(cloudAccounts []string) {
	o.CloudAccounts = cloudAccounts
}

// WithCloudTypes adds the cloudTypes to the get resources using get params
func (o *GetResourcesUsingGETParams) WithCloudTypes(cloudTypes []string) *GetResourcesUsingGETParams {
	o.SetCloudTypes(cloudTypes)
	return o
}

// SetCloudTypes adds the cloudTypes to the get resources using get params
func (o *GetResourcesUsingGETParams) SetCloudTypes(cloudTypes []string) {
	o.CloudTypes = cloudTypes
}

// WithExpand adds the expand to the get resources using get params
func (o *GetResourcesUsingGETParams) WithExpand(expand []string) *GetResourcesUsingGETParams {
	o.SetExpand(expand)
	return o
}

// SetExpand adds the expand to the get resources using get params
func (o *GetResourcesUsingGETParams) SetExpand(expand []string) {
	o.Expand = expand
}

// WithProjects adds the projects to the get resources using get params
func (o *GetResourcesUsingGETParams) WithProjects(projects []string) *GetResourcesUsingGETParams {
	o.SetProjects(projects)
	return o
}

// SetProjects adds the projects to the get resources using get params
func (o *GetResourcesUsingGETParams) SetProjects(projects []string) {
	o.Projects = projects
}

// WithResourceTypes adds the resourceTypes to the get resources using get params
func (o *GetResourcesUsingGETParams) WithResourceTypes(resourceTypes []string) *GetResourcesUsingGETParams {
	o.SetResourceTypes(resourceTypes)
	return o
}

// SetResourceTypes adds the resourceTypes to the get resources using get params
func (o *GetResourcesUsingGETParams) SetResourceTypes(resourceTypes []string) {
	o.ResourceTypes = resourceTypes
}

// WithSearch adds the search to the get resources using get params
func (o *GetResourcesUsingGETParams) WithSearch(search *string) *GetResourcesUsingGETParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the get resources using get params
func (o *GetResourcesUsingGETParams) SetSearch(search *string) {
	o.Search = search
}

// WithTags adds the tags to the get resources using get params
func (o *GetResourcesUsingGETParams) WithTags(tags []string) *GetResourcesUsingGETParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the get resources using get params
func (o *GetResourcesUsingGETParams) SetTags(tags []string) {
	o.Tags = tags
}

// WriteToRequest writes these params to a swagger request
func (o *GetResourcesUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DollarOrderby != nil {

		// binding items for $orderby
		joinedDollarOrderby := o.bindParamDollarOrderby(reg)

		// query array param $orderby
		if err := r.SetQueryParam("$orderby", joinedDollarOrderby...); err != nil {
			return err
		}
	}

	if o.DollarSkip != nil {

		// query param $skip
		var qrDollarSkip int32

		if o.DollarSkip != nil {
			qrDollarSkip = *o.DollarSkip
		}
		qDollarSkip := swag.FormatInt32(qrDollarSkip)
		if qDollarSkip != "" {

			if err := r.SetQueryParam("$skip", qDollarSkip); err != nil {
				return err
			}
		}
	}

	if o.DollarTop != nil {

		// query param $top
		var qrDollarTop int32

		if o.DollarTop != nil {
			qrDollarTop = *o.DollarTop
		}
		qDollarTop := swag.FormatInt32(qrDollarTop)
		if qDollarTop != "" {

			if err := r.SetQueryParam("$top", qDollarTop); err != nil {
				return err
			}
		}
	}

	if o.APIVersion != nil {

		// query param apiVersion
		var qrAPIVersion string

		if o.APIVersion != nil {
			qrAPIVersion = *o.APIVersion
		}
		qAPIVersion := qrAPIVersion
		if qAPIVersion != "" {

			if err := r.SetQueryParam("apiVersion", qAPIVersion); err != nil {
				return err
			}
		}
	}

	if o.CloudAccounts != nil {

		// binding items for cloudAccounts
		joinedCloudAccounts := o.bindParamCloudAccounts(reg)

		// query array param cloudAccounts
		if err := r.SetQueryParam("cloudAccounts", joinedCloudAccounts...); err != nil {
			return err
		}
	}

	if o.CloudTypes != nil {

		// binding items for cloudTypes
		joinedCloudTypes := o.bindParamCloudTypes(reg)

		// query array param cloudTypes
		if err := r.SetQueryParam("cloudTypes", joinedCloudTypes...); err != nil {
			return err
		}
	}

	if o.Expand != nil {

		// binding items for expand
		joinedExpand := o.bindParamExpand(reg)

		// query array param expand
		if err := r.SetQueryParam("expand", joinedExpand...); err != nil {
			return err
		}
	}

	if o.Projects != nil {

		// binding items for projects
		joinedProjects := o.bindParamProjects(reg)

		// query array param projects
		if err := r.SetQueryParam("projects", joinedProjects...); err != nil {
			return err
		}
	}

	if o.ResourceTypes != nil {

		// binding items for resourceTypes
		joinedResourceTypes := o.bindParamResourceTypes(reg)

		// query array param resourceTypes
		if err := r.SetQueryParam("resourceTypes", joinedResourceTypes...); err != nil {
			return err
		}
	}

	if o.Search != nil {

		// query param search
		var qrSearch string

		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {

			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}
	}

	if o.Tags != nil {

		// binding items for tags
		joinedTags := o.bindParamTags(reg)

		// query array param tags
		if err := r.SetQueryParam("tags", joinedTags...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetResourcesUsingGET binds the parameter $orderby
func (o *GetResourcesUsingGETParams) bindParamDollarOrderby(formats strfmt.Registry) []string {
	dollarOrderbyIR := o.DollarOrderby

	var dollarOrderbyIC []string
	for _, dollarOrderbyIIR := range dollarOrderbyIR { // explode []string

		dollarOrderbyIIV := dollarOrderbyIIR // string as string
		dollarOrderbyIC = append(dollarOrderbyIC, dollarOrderbyIIV)
	}

	// items.CollectionFormat: "multi"
	dollarOrderbyIS := swag.JoinByFormat(dollarOrderbyIC, "multi")

	return dollarOrderbyIS
}

// bindParamGetResourcesUsingGET binds the parameter cloudAccounts
func (o *GetResourcesUsingGETParams) bindParamCloudAccounts(formats strfmt.Registry) []string {
	cloudAccountsIR := o.CloudAccounts

	var cloudAccountsIC []string
	for _, cloudAccountsIIR := range cloudAccountsIR { // explode []string

		cloudAccountsIIV := cloudAccountsIIR // string as string
		cloudAccountsIC = append(cloudAccountsIC, cloudAccountsIIV)
	}

	// items.CollectionFormat: "multi"
	cloudAccountsIS := swag.JoinByFormat(cloudAccountsIC, "multi")

	return cloudAccountsIS
}

// bindParamGetResourcesUsingGET binds the parameter cloudTypes
func (o *GetResourcesUsingGETParams) bindParamCloudTypes(formats strfmt.Registry) []string {
	cloudTypesIR := o.CloudTypes

	var cloudTypesIC []string
	for _, cloudTypesIIR := range cloudTypesIR { // explode []string

		cloudTypesIIV := cloudTypesIIR // string as string
		cloudTypesIC = append(cloudTypesIC, cloudTypesIIV)
	}

	// items.CollectionFormat: "multi"
	cloudTypesIS := swag.JoinByFormat(cloudTypesIC, "multi")

	return cloudTypesIS
}

// bindParamGetResourcesUsingGET binds the parameter expand
func (o *GetResourcesUsingGETParams) bindParamExpand(formats strfmt.Registry) []string {
	expandIR := o.Expand

	var expandIC []string
	for _, expandIIR := range expandIR { // explode []string

		expandIIV := expandIIR // string as string
		expandIC = append(expandIC, expandIIV)
	}

	// items.CollectionFormat: "multi"
	expandIS := swag.JoinByFormat(expandIC, "multi")

	return expandIS
}

// bindParamGetResourcesUsingGET binds the parameter projects
func (o *GetResourcesUsingGETParams) bindParamProjects(formats strfmt.Registry) []string {
	projectsIR := o.Projects

	var projectsIC []string
	for _, projectsIIR := range projectsIR { // explode []string

		projectsIIV := projectsIIR // string as string
		projectsIC = append(projectsIC, projectsIIV)
	}

	// items.CollectionFormat: "multi"
	projectsIS := swag.JoinByFormat(projectsIC, "multi")

	return projectsIS
}

// bindParamGetResourcesUsingGET binds the parameter resourceTypes
func (o *GetResourcesUsingGETParams) bindParamResourceTypes(formats strfmt.Registry) []string {
	resourceTypesIR := o.ResourceTypes

	var resourceTypesIC []string
	for _, resourceTypesIIR := range resourceTypesIR { // explode []string

		resourceTypesIIV := resourceTypesIIR // string as string
		resourceTypesIC = append(resourceTypesIC, resourceTypesIIV)
	}

	// items.CollectionFormat: "multi"
	resourceTypesIS := swag.JoinByFormat(resourceTypesIC, "multi")

	return resourceTypesIS
}

// bindParamGetResourcesUsingGET binds the parameter tags
func (o *GetResourcesUsingGETParams) bindParamTags(formats strfmt.Registry) []string {
	tagsIR := o.Tags

	var tagsIC []string
	for _, tagsIIR := range tagsIR { // explode []string

		tagsIIV := tagsIIR // string as string
		tagsIC = append(tagsIC, tagsIIV)
	}

	// items.CollectionFormat: "multi"
	tagsIS := swag.JoinByFormat(tagsIC, "multi")

	return tagsIS
}
