// Code generated by go-swagger; DO NOT EDIT.

package storage_profile

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new storage profile API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for storage profile API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateStorageProfile creates storage profile

Create a new Storage Profile.
*/
func (a *Client) CreateStorageProfile(params *CreateStorageProfileParams) (*CreateStorageProfileCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStorageProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createStorageProfile",
		Method:             "POST",
		PathPattern:        "/iaas/api/storage-profiles",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateStorageProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateStorageProfileCreated), nil

}

/*
CreateStorageProfileForAWS creates a w s storage profile

Create a new AWS Storage Profile.
*/
func (a *Client) CreateStorageProfileForAWS(params *CreateStorageProfileForAWSParams) (*CreateStorageProfileForAWSCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStorageProfileForAWSParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createStorageProfileForAWS",
		Method:             "POST",
		PathPattern:        "/iaas/api/storage-profiles-aws",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateStorageProfileForAWSReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateStorageProfileForAWSCreated), nil

}

/*
CreateStorageProfileForAzure creates azure storage profile

Create a new Azure Storage Profile.
*/
func (a *Client) CreateStorageProfileForAzure(params *CreateStorageProfileForAzureParams) (*CreateStorageProfileForAzureCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStorageProfileForAzureParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createStorageProfileForAzure",
		Method:             "POST",
		PathPattern:        "/iaas/api/storage-profiles-azure",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateStorageProfileForAzureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateStorageProfileForAzureCreated), nil

}

/*
CreateStorageProfileForVsphere creates v sphere storage profile

Create a new vSphere Storage Profile.
*/
func (a *Client) CreateStorageProfileForVsphere(params *CreateStorageProfileForVsphereParams) (*CreateStorageProfileForVsphereCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStorageProfileForVsphereParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createStorageProfileForVsphere",
		Method:             "POST",
		PathPattern:        "/iaas/api/storage-profiles-vsphere",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateStorageProfileForVsphereReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateStorageProfileForVsphereCreated), nil

}

/*
DeleteAwsStorageProfile deletes a w s storage profile

Delete a single AWS StorageProfile.
*/
func (a *Client) DeleteAwsStorageProfile(params *DeleteAwsStorageProfileParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAwsStorageProfileParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAwsStorageProfile",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/storage-profiles-aws/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAwsStorageProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteAzureStorageProfile deletes azure storage profile

Delete a single Azure StorageProfile.
*/
func (a *Client) DeleteAzureStorageProfile(params *DeleteAzureStorageProfileParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAzureStorageProfileParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAzureStorageProfile",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/storage-profiles-azure/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAzureStorageProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteStorageProfile deletes storage profile

Delete a single StorageProfile.
*/
func (a *Client) DeleteStorageProfile(params *DeleteStorageProfileParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStorageProfileParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStorageProfile",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/storage-profiles/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteStorageProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteVSphereStorageProfile deletes v sphere storage profile

Delete a single vSphere StorageProfile.
*/
func (a *Client) DeleteVSphereStorageProfile(params *DeleteVSphereStorageProfileParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVSphereStorageProfileParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteVSphereStorageProfile",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/storage-profiles-vsphere/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVSphereStorageProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetAwsStorageProfile gets a w s storage profile

Get a single AWS StorageProfile.
*/
func (a *Client) GetAwsStorageProfile(params *GetAwsStorageProfileParams) (*GetAwsStorageProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAwsStorageProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAwsStorageProfile",
		Method:             "GET",
		PathPattern:        "/iaas/api/storage-profiles-aws/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAwsStorageProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAwsStorageProfileOK), nil

}

/*
GetAwsStorageProfiles gets a w s storage profiles

Get all AWS storage profiles.
*/
func (a *Client) GetAwsStorageProfiles(params *GetAwsStorageProfilesParams) (*GetAwsStorageProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAwsStorageProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAwsStorageProfiles",
		Method:             "GET",
		PathPattern:        "/iaas/api/storage-profiles-aws",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAwsStorageProfilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAwsStorageProfilesOK), nil

}

/*
GetAzureStorageProfile gets azure storage profile

Get a single Azure StorageProfile.
*/
func (a *Client) GetAzureStorageProfile(params *GetAzureStorageProfileParams) (*GetAzureStorageProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAzureStorageProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAzureStorageProfile",
		Method:             "GET",
		PathPattern:        "/iaas/api/storage-profiles-azure/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAzureStorageProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAzureStorageProfileOK), nil

}

/*
GetAzureStorageProfiles gets azure storage profiles

Get all Azure storage profiles.
*/
func (a *Client) GetAzureStorageProfiles(params *GetAzureStorageProfilesParams) (*GetAzureStorageProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAzureStorageProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAzureStorageProfiles",
		Method:             "GET",
		PathPattern:        "/iaas/api/storage-profiles-azure",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAzureStorageProfilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAzureStorageProfilesOK), nil

}

/*
GetStorageProfile gets storage profile

Get a single StorageProfile.
*/
func (a *Client) GetStorageProfile(params *GetStorageProfileParams) (*GetStorageProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStorageProfile",
		Method:             "GET",
		PathPattern:        "/iaas/api/storage-profiles/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStorageProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStorageProfileOK), nil

}

/*
GetStorageProfiles gets storage profiles

Get all storage profiles.
*/
func (a *Client) GetStorageProfiles(params *GetStorageProfilesParams) (*GetStorageProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStorageProfiles",
		Method:             "GET",
		PathPattern:        "/iaas/api/storage-profiles",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStorageProfilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStorageProfilesOK), nil

}

/*
GetVSphereStorageProfile gets v sphere storage profile

Get a single vSphere StorageProfile.
*/
func (a *Client) GetVSphereStorageProfile(params *GetVSphereStorageProfileParams) (*GetVSphereStorageProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVSphereStorageProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVSphereStorageProfile",
		Method:             "GET",
		PathPattern:        "/iaas/api/storage-profiles-vsphere/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVSphereStorageProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVSphereStorageProfileOK), nil

}

/*
GetVSphereStorageProfiles gets v sphere storage profiles

Get all vSphere storage profiles.
*/
func (a *Client) GetVSphereStorageProfiles(params *GetVSphereStorageProfilesParams) (*GetVSphereStorageProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVSphereStorageProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVSphereStorageProfiles",
		Method:             "GET",
		PathPattern:        "/iaas/api/storage-profiles-vsphere",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVSphereStorageProfilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVSphereStorageProfilesOK), nil

}

/*
UpdateAwsStorageProfile updates a w s storage profile

Update AWS StorageProfile.
*/
func (a *Client) UpdateAwsStorageProfile(params *UpdateAwsStorageProfileParams) (*UpdateAwsStorageProfileCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAwsStorageProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAwsStorageProfile",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/storage-profiles-aws/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAwsStorageProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateAwsStorageProfileCreated), nil

}

/*
UpdateAzureStorageProfile updates azure storage profile

Update Azure StorageProfile
*/
func (a *Client) UpdateAzureStorageProfile(params *UpdateAzureStorageProfileParams) (*UpdateAzureStorageProfileCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAzureStorageProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAzureStorageProfile",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/storage-profiles-azure/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAzureStorageProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateAzureStorageProfileCreated), nil

}

/*
UpdateStorageProfile updates storage profile

Update StorageProfile.
*/
func (a *Client) UpdateStorageProfile(params *UpdateStorageProfileParams) (*UpdateStorageProfileCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStorageProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateStorageProfile",
		Method:             "PUT",
		PathPattern:        "/iaas/api/storage-profiles/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateStorageProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateStorageProfileCreated), nil

}

/*
UpdateVSphereStorageProfile updates v sphere storage profile

Update vSphere StorageProfile
*/
func (a *Client) UpdateVSphereStorageProfile(params *UpdateVSphereStorageProfileParams) (*UpdateVSphereStorageProfileCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVSphereStorageProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateVSphereStorageProfile",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/storage-profiles-vsphere/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateVSphereStorageProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateVSphereStorageProfileCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
