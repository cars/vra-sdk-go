// Code generated by go-swagger; DO NOT EDIT.

package request

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new request API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for request API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DescribeRequest describes a request

Describe a Request.
*/
func (a *Client) DescribeRequest(params *DescribeRequestParams) (*DescribeRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "describeRequest",
		Method:             "GET",
		PathPattern:        "/iaas/api/request-tracker/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeRequestOK), nil

}

/*
GetRequest gets request

Get all Requests.
*/
func (a *Client) GetRequest(params *GetRequestParams) (*GetRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRequest",
		Method:             "GET",
		PathPattern:        "/iaas/api/request-tracker",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRequestOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
