// Code generated by go-swagger; DO NOT EDIT.

package deployment_requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDeploymentRequestUsingGETParams creates a new GetDeploymentRequestUsingGETParams object
// with the default values initialized.
func NewGetDeploymentRequestUsingGETParams() *GetDeploymentRequestUsingGETParams {
	var ()
	return &GetDeploymentRequestUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDeploymentRequestUsingGETParamsWithTimeout creates a new GetDeploymentRequestUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDeploymentRequestUsingGETParamsWithTimeout(timeout time.Duration) *GetDeploymentRequestUsingGETParams {
	var ()
	return &GetDeploymentRequestUsingGETParams{

		timeout: timeout,
	}
}

// NewGetDeploymentRequestUsingGETParamsWithContext creates a new GetDeploymentRequestUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDeploymentRequestUsingGETParamsWithContext(ctx context.Context) *GetDeploymentRequestUsingGETParams {
	var ()
	return &GetDeploymentRequestUsingGETParams{

		Context: ctx,
	}
}

// NewGetDeploymentRequestUsingGETParamsWithHTTPClient creates a new GetDeploymentRequestUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDeploymentRequestUsingGETParamsWithHTTPClient(client *http.Client) *GetDeploymentRequestUsingGETParams {
	var ()
	return &GetDeploymentRequestUsingGETParams{
		HTTPClient: client,
	}
}

/*GetDeploymentRequestUsingGETParams contains all the parameters to send to the API endpoint
for the get deployment request using g e t operation typically these are written to a http.Request
*/
type GetDeploymentRequestUsingGETParams struct {

	/*RequestID
	  Request ID

	*/
	RequestID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get deployment request using g e t params
func (o *GetDeploymentRequestUsingGETParams) WithTimeout(timeout time.Duration) *GetDeploymentRequestUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get deployment request using g e t params
func (o *GetDeploymentRequestUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get deployment request using g e t params
func (o *GetDeploymentRequestUsingGETParams) WithContext(ctx context.Context) *GetDeploymentRequestUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get deployment request using g e t params
func (o *GetDeploymentRequestUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get deployment request using g e t params
func (o *GetDeploymentRequestUsingGETParams) WithHTTPClient(client *http.Client) *GetDeploymentRequestUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get deployment request using g e t params
func (o *GetDeploymentRequestUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRequestID adds the requestID to the get deployment request using g e t params
func (o *GetDeploymentRequestUsingGETParams) WithRequestID(requestID strfmt.UUID) *GetDeploymentRequestUsingGETParams {
	o.SetRequestID(requestID)
	return o
}

// SetRequestID adds the requestId to the get deployment request using g e t params
func (o *GetDeploymentRequestUsingGETParams) SetRequestID(requestID strfmt.UUID) {
	o.RequestID = requestID
}

// WriteToRequest writes these params to a swagger request
func (o *GetDeploymentRequestUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param requestId
	if err := r.SetPathParam("requestId", o.RequestID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
