// Code generated by go-swagger; DO NOT EDIT.

package deployment_requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new deployment requests API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for deployment requests API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ActionDeploymentRequestUsingPOST sends action to request
*/
func (a *Client) ActionDeploymentRequestUsingPOST(params *ActionDeploymentRequestUsingPOSTParams) (*ActionDeploymentRequestUsingPOSTOK, *ActionDeploymentRequestUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionDeploymentRequestUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "actionDeploymentRequestUsingPOST",
		Method:             "POST",
		PathPattern:        "/deployment/api/requests/{requestId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActionDeploymentRequestUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ActionDeploymentRequestUsingPOSTOK:
		return value, nil, nil
	case *ActionDeploymentRequestUsingPOSTCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetDeploymentRequestUsingGET gets request for the specified ID
*/
func (a *Client) GetDeploymentRequestUsingGET(params *GetDeploymentRequestUsingGETParams) (*GetDeploymentRequestUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentRequestUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeploymentRequestUsingGET",
		Method:             "GET",
		PathPattern:        "/deployment/api/requests/{requestId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeploymentRequestUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeploymentRequestUsingGETOK), nil

}

/*
ListDeploymentRequestsUsingGET gets all requests for a deployment
*/
func (a *Client) ListDeploymentRequestsUsingGET(params *ListDeploymentRequestsUsingGETParams) (*ListDeploymentRequestsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDeploymentRequestsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listDeploymentRequestsUsingGET",
		Method:             "GET",
		PathPattern:        "/deployment/api/requests",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListDeploymentRequestsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListDeploymentRequestsUsingGETOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
