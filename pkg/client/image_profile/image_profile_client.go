// Code generated by go-swagger; DO NOT EDIT.

package image_profile

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new image profile API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for image profile API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateImage creates image profile

Create a new image profile.
*/
func (a *Client) CreateImage(params *CreateImageParams) (*CreateImageCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateImageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createImage",
		Method:             "POST",
		PathPattern:        "/iaas/api/image-profiles",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateImageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateImageCreated), nil

}

/*
DeleteImageProfile deletes image profile

Delete a single image profile.
*/
func (a *Client) DeleteImageProfile(params *DeleteImageProfileParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteImageProfileParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteImageProfile",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/image-profiles/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteImageProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetImageProfile gets image profile

Get a single image profile.
*/
func (a *Client) GetImageProfile(params *GetImageProfileParams) (*GetImageProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImageProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getImageProfile",
		Method:             "GET",
		PathPattern:        "/iaas/api/image-profiles/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetImageProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImageProfileOK), nil

}

/*
GetImageProfiles gets image profile

Get all image profiles.
*/
func (a *Client) GetImageProfiles(params *GetImageProfilesParams) (*GetImageProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImageProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getImageProfiles",
		Method:             "GET",
		PathPattern:        "/iaas/api/image-profiles",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetImageProfilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImageProfilesOK), nil

}

/*
UpdateImage updates image profile

Update a single image profile.
*/
func (a *Client) UpdateImage(params *UpdateImageParams) (*UpdateImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateImageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateImage",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/image-profiles/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateImageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateImageOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
