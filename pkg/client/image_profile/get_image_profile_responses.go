// Code generated by go-swagger; DO NOT EDIT.

package image_profile

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// GetImageProfileReader is a Reader for the GetImageProfile structure.
type GetImageProfileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetImageProfileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetImageProfileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetImageProfileForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetImageProfileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetImageProfileOK creates a GetImageProfileOK with default headers values
func NewGetImageProfileOK() *GetImageProfileOK {
	return &GetImageProfileOK{}
}

/* GetImageProfileOK describes a response with status code 200, with default header values.

successful operation
*/
type GetImageProfileOK struct {
	Payload *models.ImageProfile
}

func (o *GetImageProfileOK) Error() string {
	return fmt.Sprintf("[GET /iaas/api/image-profiles/{id}][%d] getImageProfileOK  %+v", 200, o.Payload)
}
func (o *GetImageProfileOK) GetPayload() *models.ImageProfile {
	return o.Payload
}

func (o *GetImageProfileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ImageProfile)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetImageProfileForbidden creates a GetImageProfileForbidden with default headers values
func NewGetImageProfileForbidden() *GetImageProfileForbidden {
	return &GetImageProfileForbidden{}
}

/* GetImageProfileForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetImageProfileForbidden struct {
	Payload *models.ServiceErrorResponse
}

func (o *GetImageProfileForbidden) Error() string {
	return fmt.Sprintf("[GET /iaas/api/image-profiles/{id}][%d] getImageProfileForbidden  %+v", 403, o.Payload)
}
func (o *GetImageProfileForbidden) GetPayload() *models.ServiceErrorResponse {
	return o.Payload
}

func (o *GetImageProfileForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetImageProfileNotFound creates a GetImageProfileNotFound with default headers values
func NewGetImageProfileNotFound() *GetImageProfileNotFound {
	return &GetImageProfileNotFound{}
}

/* GetImageProfileNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetImageProfileNotFound struct {
	Payload *models.Error
}

func (o *GetImageProfileNotFound) Error() string {
	return fmt.Sprintf("[GET /iaas/api/image-profiles/{id}][%d] getImageProfileNotFound  %+v", 404, o.Payload)
}
func (o *GetImageProfileNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetImageProfileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
