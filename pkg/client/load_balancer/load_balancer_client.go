// Code generated by go-swagger; DO NOT EDIT.

package load_balancer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new load balancer API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for load balancer API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateLoadBalancer creates load balancer

Create a new Load Balancer.
*/
func (a *Client) CreateLoadBalancer(params *CreateLoadBalancerParams) (*CreateLoadBalancerCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLoadBalancerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createLoadBalancer",
		Method:             "POST",
		PathPattern:        "/iaas/api/load-balancers",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateLoadBalancerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateLoadBalancerCreated), nil

}

/*
DeleteLoadBalancer deletes a load balancer

Delete a Load Balancer.
*/
func (a *Client) DeleteLoadBalancer(params *DeleteLoadBalancerParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLoadBalancerParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteLoadBalancer",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/load-balancers/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLoadBalancerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DescribeLoadBalancer describes a load balancer

Describe a Load Balancer.
*/
func (a *Client) DescribeLoadBalancer(params *DescribeLoadBalancerParams) (*DescribeLoadBalancerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeLoadBalancerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "describeLoadBalancer",
		Method:             "GET",
		PathPattern:        "/iaas/api/load-balancers/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeLoadBalancerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeLoadBalancerOK), nil

}

/*
GetLoadBalancers gets load balancers

Get a page of Load Balancers.
*/
func (a *Client) GetLoadBalancers(params *GetLoadBalancersParams) (*GetLoadBalancersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLoadBalancersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLoadBalancers",
		Method:             "GET",
		PathPattern:        "/iaas/api/load-balancers",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLoadBalancersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLoadBalancersOK), nil

}

/*
LoadBalancerDeleteOperation deletes operation for load balancer

Perform a second day delete operation for Load Balancer.
*/
func (a *Client) LoadBalancerDeleteOperation(params *LoadBalancerDeleteOperationParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadBalancerDeleteOperationParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "loadBalancerDeleteOperation",
		Method:             "POST",
		PathPattern:        "/iaas/api/load-balancers/{id}/operations/delete",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LoadBalancerDeleteOperationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
LoadBalancerScaleOperation scales operation for load balancer

Perform a second day scale operation for Load Balancer.
*/
func (a *Client) LoadBalancerScaleOperation(params *LoadBalancerScaleOperationParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadBalancerScaleOperationParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "loadBalancerScaleOperation",
		Method:             "POST",
		PathPattern:        "/iaas/api/load-balancers/{id}/operations/scale",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LoadBalancerScaleOperationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
