// Code generated by go-swagger; DO NOT EDIT.

package blueprint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/cas-sdk-go/pkg/models"
)

// NewCreateBlueprintUsingPOSTParams creates a new CreateBlueprintUsingPOSTParams object
// with the default values initialized.
func NewCreateBlueprintUsingPOSTParams() *CreateBlueprintUsingPOSTParams {
	var ()
	return &CreateBlueprintUsingPOSTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateBlueprintUsingPOSTParamsWithTimeout creates a new CreateBlueprintUsingPOSTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateBlueprintUsingPOSTParamsWithTimeout(timeout time.Duration) *CreateBlueprintUsingPOSTParams {
	var ()
	return &CreateBlueprintUsingPOSTParams{

		timeout: timeout,
	}
}

// NewCreateBlueprintUsingPOSTParamsWithContext creates a new CreateBlueprintUsingPOSTParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateBlueprintUsingPOSTParamsWithContext(ctx context.Context) *CreateBlueprintUsingPOSTParams {
	var ()
	return &CreateBlueprintUsingPOSTParams{

		Context: ctx,
	}
}

// NewCreateBlueprintUsingPOSTParamsWithHTTPClient creates a new CreateBlueprintUsingPOSTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateBlueprintUsingPOSTParamsWithHTTPClient(client *http.Client) *CreateBlueprintUsingPOSTParams {
	var ()
	return &CreateBlueprintUsingPOSTParams{
		HTTPClient: client,
	}
}

/*CreateBlueprintUsingPOSTParams contains all the parameters to send to the API endpoint
for the create blueprint using p o s t operation typically these are written to a http.Request
*/
type CreateBlueprintUsingPOSTParams struct {

	/*Blueprint
	  Blueprint object

	*/
	Blueprint *models.Blueprint

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create blueprint using p o s t params
func (o *CreateBlueprintUsingPOSTParams) WithTimeout(timeout time.Duration) *CreateBlueprintUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create blueprint using p o s t params
func (o *CreateBlueprintUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create blueprint using p o s t params
func (o *CreateBlueprintUsingPOSTParams) WithContext(ctx context.Context) *CreateBlueprintUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create blueprint using p o s t params
func (o *CreateBlueprintUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create blueprint using p o s t params
func (o *CreateBlueprintUsingPOSTParams) WithHTTPClient(client *http.Client) *CreateBlueprintUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create blueprint using p o s t params
func (o *CreateBlueprintUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBlueprint adds the blueprint to the create blueprint using p o s t params
func (o *CreateBlueprintUsingPOSTParams) WithBlueprint(blueprint *models.Blueprint) *CreateBlueprintUsingPOSTParams {
	o.SetBlueprint(blueprint)
	return o
}

// SetBlueprint adds the blueprint to the create blueprint using p o s t params
func (o *CreateBlueprintUsingPOSTParams) SetBlueprint(blueprint *models.Blueprint) {
	o.Blueprint = blueprint
}

// WriteToRequest writes these params to a swagger request
func (o *CreateBlueprintUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Blueprint != nil {
		if err := r.SetBodyParam(o.Blueprint); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
