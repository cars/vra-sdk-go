// Code generated by go-swagger; DO NOT EDIT.

package blueprint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new blueprint API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for blueprint API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateBlueprintUsingPOST creates a blueprint
*/
func (a *Client) CreateBlueprintUsingPOST(params *CreateBlueprintUsingPOSTParams) (*CreateBlueprintUsingPOSTOK, *CreateBlueprintUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBlueprintUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createBlueprintUsingPOST",
		Method:             "POST",
		PathPattern:        "/blueprint/api/blueprints",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateBlueprintUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateBlueprintUsingPOSTOK:
		return value, nil, nil
	case *CreateBlueprintUsingPOSTCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
CreateBlueprintVersionUsingPOST creates version for the given blueprint ID
*/
func (a *Client) CreateBlueprintVersionUsingPOST(params *CreateBlueprintVersionUsingPOSTParams) (*CreateBlueprintVersionUsingPOSTOK, *CreateBlueprintVersionUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBlueprintVersionUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createBlueprintVersionUsingPOST",
		Method:             "POST",
		PathPattern:        "/blueprint/api/blueprints/{blueprintId}/versions",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateBlueprintVersionUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateBlueprintVersionUsingPOSTOK:
		return value, nil, nil
	case *CreateBlueprintVersionUsingPOSTCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
DeleteBlueprintUsingDELETE deletes a blueprint
*/
func (a *Client) DeleteBlueprintUsingDELETE(params *DeleteBlueprintUsingDELETEParams) (*DeleteBlueprintUsingDELETEOK, *DeleteBlueprintUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBlueprintUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteBlueprintUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/blueprint/api/blueprints/{blueprintId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBlueprintUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteBlueprintUsingDELETEOK:
		return value, nil, nil
	case *DeleteBlueprintUsingDELETENoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetBlueprintInputsSchemaUsingGET returns blueprint inputs schema
*/
func (a *Client) GetBlueprintInputsSchemaUsingGET(params *GetBlueprintInputsSchemaUsingGETParams) (*GetBlueprintInputsSchemaUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlueprintInputsSchemaUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBlueprintInputsSchemaUsingGET",
		Method:             "GET",
		PathPattern:        "/blueprint/api/blueprints/{blueprintId}/inputs-schema",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBlueprintInputsSchemaUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBlueprintInputsSchemaUsingGETOK), nil

}

/*
GetBlueprintUsingGET returns blueprint details
*/
func (a *Client) GetBlueprintUsingGET(params *GetBlueprintUsingGETParams) (*GetBlueprintUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlueprintUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBlueprintUsingGET",
		Method:             "GET",
		PathPattern:        "/blueprint/api/blueprints/{blueprintId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBlueprintUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBlueprintUsingGETOK), nil

}

/*
GetBlueprintVersionUsingGET returns versioned blueprint details
*/
func (a *Client) GetBlueprintVersionUsingGET(params *GetBlueprintVersionUsingGETParams) (*GetBlueprintVersionUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlueprintVersionUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBlueprintVersionUsingGET",
		Method:             "GET",
		PathPattern:        "/blueprint/api/blueprints/{blueprintId}/versions/{version}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBlueprintVersionUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBlueprintVersionUsingGETOK), nil

}

/*
GetBlueprintVersionsUsingGET lists blueprint versions
*/
func (a *Client) GetBlueprintVersionsUsingGET(params *GetBlueprintVersionsUsingGETParams) (*GetBlueprintVersionsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlueprintVersionsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBlueprintVersionsUsingGET",
		Method:             "GET",
		PathPattern:        "/blueprint/api/blueprints/{blueprintId}/versions",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBlueprintVersionsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBlueprintVersionsUsingGETOK), nil

}

/*
ListBlueprintsUsingGET lists draft blueprint
*/
func (a *Client) ListBlueprintsUsingGET(params *ListBlueprintsUsingGETParams) (*ListBlueprintsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBlueprintsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listBlueprintsUsingGET",
		Method:             "GET",
		PathPattern:        "/blueprint/api/blueprints",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListBlueprintsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListBlueprintsUsingGETOK), nil

}

/*
ReleaseBlueprintVersionUsingPOST releases versioned blueprint to catalog
*/
func (a *Client) ReleaseBlueprintVersionUsingPOST(params *ReleaseBlueprintVersionUsingPOSTParams) (*ReleaseBlueprintVersionUsingPOSTOK, *ReleaseBlueprintVersionUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReleaseBlueprintVersionUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "releaseBlueprintVersionUsingPOST",
		Method:             "POST",
		PathPattern:        "/blueprint/api/blueprints/{blueprintId}/versions/{version}/action/release",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReleaseBlueprintVersionUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReleaseBlueprintVersionUsingPOSTOK:
		return value, nil, nil
	case *ReleaseBlueprintVersionUsingPOSTCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
RestoreBlueprintVersionUsingPOST restores content of draft from versioned blueprint
*/
func (a *Client) RestoreBlueprintVersionUsingPOST(params *RestoreBlueprintVersionUsingPOSTParams) (*RestoreBlueprintVersionUsingPOSTOK, *RestoreBlueprintVersionUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestoreBlueprintVersionUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "restoreBlueprintVersionUsingPOST",
		Method:             "POST",
		PathPattern:        "/blueprint/api/blueprints/{blueprintId}/versions/{version}/action/restore",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RestoreBlueprintVersionUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RestoreBlueprintVersionUsingPOSTOK:
		return value, nil, nil
	case *RestoreBlueprintVersionUsingPOSTCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
UnReleaseBlueprintVersionUsingPOST uns release versioned blueprint from catalog
*/
func (a *Client) UnReleaseBlueprintVersionUsingPOST(params *UnReleaseBlueprintVersionUsingPOSTParams) (*UnReleaseBlueprintVersionUsingPOSTOK, *UnReleaseBlueprintVersionUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnReleaseBlueprintVersionUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unReleaseBlueprintVersionUsingPOST",
		Method:             "POST",
		PathPattern:        "/blueprint/api/blueprints/{blueprintId}/versions/{version}/action/unrelease",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnReleaseBlueprintVersionUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UnReleaseBlueprintVersionUsingPOSTOK:
		return value, nil, nil
	case *UnReleaseBlueprintVersionUsingPOSTCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
UpdateBlueprintUsingPUT updates a blueprint
*/
func (a *Client) UpdateBlueprintUsingPUT(params *UpdateBlueprintUsingPUTParams) (*UpdateBlueprintUsingPUTOK, *UpdateBlueprintUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBlueprintUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateBlueprintUsingPUT",
		Method:             "PUT",
		PathPattern:        "/blueprint/api/blueprints/{blueprintId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateBlueprintUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateBlueprintUsingPUTOK:
		return value, nil, nil
	case *UpdateBlueprintUsingPUTCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
