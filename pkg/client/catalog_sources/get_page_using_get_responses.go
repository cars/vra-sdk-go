// Code generated by go-swagger; DO NOT EDIT.

package catalog_sources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/vra-sdk-go/pkg/models"
)

// GetPageUsingGETReader is a Reader for the GetPageUsingGET structure.
type GetPageUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPageUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPageUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetPageUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPageUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPageUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetPageUsingGETOK creates a GetPageUsingGETOK with default headers values
func NewGetPageUsingGETOK() *GetPageUsingGETOK {
	return &GetPageUsingGETOK{}
}

/*GetPageUsingGETOK handles this case with default header values.

OK
*/
type GetPageUsingGETOK struct {
	Payload *models.CatalogSource
}

func (o *GetPageUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /catalog/api/admin/sources][%d] getPageUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetPageUsingGETOK) GetPayload() *models.CatalogSource {
	return o.Payload
}

func (o *GetPageUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CatalogSource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPageUsingGETUnauthorized creates a GetPageUsingGETUnauthorized with default headers values
func NewGetPageUsingGETUnauthorized() *GetPageUsingGETUnauthorized {
	return &GetPageUsingGETUnauthorized{}
}

/*GetPageUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetPageUsingGETUnauthorized struct {
}

func (o *GetPageUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /catalog/api/admin/sources][%d] getPageUsingGETUnauthorized ", 401)
}

func (o *GetPageUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPageUsingGETForbidden creates a GetPageUsingGETForbidden with default headers values
func NewGetPageUsingGETForbidden() *GetPageUsingGETForbidden {
	return &GetPageUsingGETForbidden{}
}

/*GetPageUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetPageUsingGETForbidden struct {
}

func (o *GetPageUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /catalog/api/admin/sources][%d] getPageUsingGETForbidden ", 403)
}

func (o *GetPageUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPageUsingGETNotFound creates a GetPageUsingGETNotFound with default headers values
func NewGetPageUsingGETNotFound() *GetPageUsingGETNotFound {
	return &GetPageUsingGETNotFound{}
}

/*GetPageUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetPageUsingGETNotFound struct {
}

func (o *GetPageUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /catalog/api/admin/sources][%d] getPageUsingGETNotFound ", 404)
}

func (o *GetPageUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
