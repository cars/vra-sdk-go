// Code generated by go-swagger; DO NOT EDIT.

package catalog_items

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetCatalogItemsUsingGET1Params creates a new GetCatalogItemsUsingGET1Params object
// with the default values initialized.
func NewGetCatalogItemsUsingGET1Params() *GetCatalogItemsUsingGET1Params {
	var ()
	return &GetCatalogItemsUsingGET1Params{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCatalogItemsUsingGET1ParamsWithTimeout creates a new GetCatalogItemsUsingGET1Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCatalogItemsUsingGET1ParamsWithTimeout(timeout time.Duration) *GetCatalogItemsUsingGET1Params {
	var ()
	return &GetCatalogItemsUsingGET1Params{

		timeout: timeout,
	}
}

// NewGetCatalogItemsUsingGET1ParamsWithContext creates a new GetCatalogItemsUsingGET1Params object
// with the default values initialized, and the ability to set a context for a request
func NewGetCatalogItemsUsingGET1ParamsWithContext(ctx context.Context) *GetCatalogItemsUsingGET1Params {
	var ()
	return &GetCatalogItemsUsingGET1Params{

		Context: ctx,
	}
}

// NewGetCatalogItemsUsingGET1ParamsWithHTTPClient creates a new GetCatalogItemsUsingGET1Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetCatalogItemsUsingGET1ParamsWithHTTPClient(client *http.Client) *GetCatalogItemsUsingGET1Params {
	var ()
	return &GetCatalogItemsUsingGET1Params{
		HTTPClient: client,
	}
}

/*GetCatalogItemsUsingGET1Params contains all the parameters to send to the API endpoint
for the get catalog items using get1 operation typically these are written to a http.Request
*/
type GetCatalogItemsUsingGET1Params struct {

	/*ExpandProjects
	  Whether or not to return detailed project data for each result.

	*/
	ExpandProjects *bool
	/*Page
	  Results page you want to retrieve (0..N)

	*/
	Page *int32
	/*Projects
	  A list of project IDs. Results will belong to one of these projects.

	*/
	Projects []string
	/*Search
	  Matches will have this string somewhere in their name or description.

	*/
	Search *string
	/*Size
	  Number of records per page.

	*/
	Size *int32
	/*Sort
	  Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.

	*/
	Sort []string
	/*Types
	  A list of Catalog Item Type IDs. Results will be one of these types.

	*/
	Types []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get catalog items using get1 params
func (o *GetCatalogItemsUsingGET1Params) WithTimeout(timeout time.Duration) *GetCatalogItemsUsingGET1Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get catalog items using get1 params
func (o *GetCatalogItemsUsingGET1Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get catalog items using get1 params
func (o *GetCatalogItemsUsingGET1Params) WithContext(ctx context.Context) *GetCatalogItemsUsingGET1Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get catalog items using get1 params
func (o *GetCatalogItemsUsingGET1Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get catalog items using get1 params
func (o *GetCatalogItemsUsingGET1Params) WithHTTPClient(client *http.Client) *GetCatalogItemsUsingGET1Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get catalog items using get1 params
func (o *GetCatalogItemsUsingGET1Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExpandProjects adds the expandProjects to the get catalog items using get1 params
func (o *GetCatalogItemsUsingGET1Params) WithExpandProjects(expandProjects *bool) *GetCatalogItemsUsingGET1Params {
	o.SetExpandProjects(expandProjects)
	return o
}

// SetExpandProjects adds the expandProjects to the get catalog items using get1 params
func (o *GetCatalogItemsUsingGET1Params) SetExpandProjects(expandProjects *bool) {
	o.ExpandProjects = expandProjects
}

// WithPage adds the page to the get catalog items using get1 params
func (o *GetCatalogItemsUsingGET1Params) WithPage(page *int32) *GetCatalogItemsUsingGET1Params {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get catalog items using get1 params
func (o *GetCatalogItemsUsingGET1Params) SetPage(page *int32) {
	o.Page = page
}

// WithProjects adds the projects to the get catalog items using get1 params
func (o *GetCatalogItemsUsingGET1Params) WithProjects(projects []string) *GetCatalogItemsUsingGET1Params {
	o.SetProjects(projects)
	return o
}

// SetProjects adds the projects to the get catalog items using get1 params
func (o *GetCatalogItemsUsingGET1Params) SetProjects(projects []string) {
	o.Projects = projects
}

// WithSearch adds the search to the get catalog items using get1 params
func (o *GetCatalogItemsUsingGET1Params) WithSearch(search *string) *GetCatalogItemsUsingGET1Params {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the get catalog items using get1 params
func (o *GetCatalogItemsUsingGET1Params) SetSearch(search *string) {
	o.Search = search
}

// WithSize adds the size to the get catalog items using get1 params
func (o *GetCatalogItemsUsingGET1Params) WithSize(size *int32) *GetCatalogItemsUsingGET1Params {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the get catalog items using get1 params
func (o *GetCatalogItemsUsingGET1Params) SetSize(size *int32) {
	o.Size = size
}

// WithSort adds the sort to the get catalog items using get1 params
func (o *GetCatalogItemsUsingGET1Params) WithSort(sort []string) *GetCatalogItemsUsingGET1Params {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get catalog items using get1 params
func (o *GetCatalogItemsUsingGET1Params) SetSort(sort []string) {
	o.Sort = sort
}

// WithTypes adds the types to the get catalog items using get1 params
func (o *GetCatalogItemsUsingGET1Params) WithTypes(types []string) *GetCatalogItemsUsingGET1Params {
	o.SetTypes(types)
	return o
}

// SetTypes adds the types to the get catalog items using get1 params
func (o *GetCatalogItemsUsingGET1Params) SetTypes(types []string) {
	o.Types = types
}

// WriteToRequest writes these params to a swagger request
func (o *GetCatalogItemsUsingGET1Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ExpandProjects != nil {

		// query param expandProjects
		var qrExpandProjects bool
		if o.ExpandProjects != nil {
			qrExpandProjects = *o.ExpandProjects
		}
		qExpandProjects := swag.FormatBool(qrExpandProjects)
		if qExpandProjects != "" {
			if err := r.SetQueryParam("expandProjects", qExpandProjects); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int32
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	valuesProjects := o.Projects

	joinedProjects := swag.JoinByFormat(valuesProjects, "multi")
	// query array param projects
	if err := r.SetQueryParam("projects", joinedProjects...); err != nil {
		return err
	}

	if o.Search != nil {

		// query param search
		var qrSearch string
		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {
			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}

	}

	if o.Size != nil {

		// query param size
		var qrSize int32
		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt32(qrSize)
		if qSize != "" {
			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}

	}

	valuesSort := o.Sort

	joinedSort := swag.JoinByFormat(valuesSort, "multi")
	// query array param sort
	if err := r.SetQueryParam("sort", joinedSort...); err != nil {
		return err
	}

	valuesTypes := o.Types

	joinedTypes := swag.JoinByFormat(valuesTypes, "multi")
	// query array param types
	if err := r.SetQueryParam("types", joinedTypes...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
