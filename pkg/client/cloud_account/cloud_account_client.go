// Code generated by go-swagger; DO NOT EDIT.

package cloud_account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new cloud account API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cloud account API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateCloudAccount creates a cloud account

Create a cloud account in the current organization
*/
func (a *Client) CreateCloudAccount(params *CreateCloudAccountParams) (*CreateCloudAccountCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCloudAccount",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateCloudAccountCreated), nil

}

/*
CreateCloudAccountAws creates an a w s cloud account

Create an AWS cloud account
*/
func (a *Client) CreateCloudAccountAws(params *CreateCloudAccountAwsParams) (*CreateCloudAccountAwsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCloudAccountAwsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCloudAccountAws",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-aws",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCloudAccountAwsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateCloudAccountAwsCreated), nil

}

/*
CreateCloudAccountAzure creates an azure cloud account

Create an azure cloud account within the current organization
*/
func (a *Client) CreateCloudAccountAzure(params *CreateCloudAccountAzureParams) (*CreateCloudAccountAzureCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCloudAccountAzureParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCloudAccountAzure",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-azure",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCloudAccountAzureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateCloudAccountAzureCreated), nil

}

/*
CreateCloudAccountNsxT creates a n s x t cloud account

Create a NSX-T cloud account within the current organization
*/
func (a *Client) CreateCloudAccountNsxT(params *CreateCloudAccountNsxTParams) (*CreateCloudAccountNsxTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCloudAccountNsxTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCloudAccountNsxT",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-t",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCloudAccountNsxTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateCloudAccountNsxTCreated), nil

}

/*
CreateCloudAccountNsxV creates a n s x v cloud account

Create a NSX-V cloud account within the current organization
*/
func (a *Client) CreateCloudAccountNsxV(params *CreateCloudAccountNsxVParams) (*CreateCloudAccountNsxVCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCloudAccountNsxVParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCloudAccountNsxV",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-v",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCloudAccountNsxVReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateCloudAccountNsxVCreated), nil

}

/*
CreateCloudAccountVsphere creates a v sphere cloud account

Create a vSphere cloud account within the current organization
*/
func (a *Client) CreateCloudAccountVsphere(params *CreateCloudAccountVsphereParams) (*CreateCloudAccountVsphereCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCloudAccountVsphereParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCloudAccountVsphere",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-vsphere",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCloudAccountVsphereReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateCloudAccountVsphereCreated), nil

}

/*
DeleteCloudAccount deletes a cloud account

Delete a cloud account with a given id
*/
func (a *Client) DeleteCloudAccount(params *DeleteCloudAccountParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudAccountParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCloudAccount",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/cloud-accounts/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteCloudAccountAws deletes an a w s cloud account

Delete an AWS cloud account with given ID
*/
func (a *Client) DeleteCloudAccountAws(params *DeleteCloudAccountAwsParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudAccountAwsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCloudAccountAws",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/cloud-accounts-aws/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudAccountAwsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteCloudAccountAzure deletes an azure cloud account

Delete an Azure Cloud Account with given ID
*/
func (a *Client) DeleteCloudAccountAzure(params *DeleteCloudAccountAzureParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudAccountAzureParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCloudAccountAzure",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/cloud-accounts-azure/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudAccountAzureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteCloudAccountNsxT deletes a nsx t cloud account

Delete a Nsx-T cloud account with a given ID
*/
func (a *Client) DeleteCloudAccountNsxT(params *DeleteCloudAccountNsxTParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudAccountNsxTParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCloudAccountNsx-T",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-t/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudAccountNsxTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteCloudAccountNsxV deletes a nsx v cloud account

Delete a Nsx-V cloud account with a given ID
*/
func (a *Client) DeleteCloudAccountNsxV(params *DeleteCloudAccountNsxVParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudAccountNsxVParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCloudAccountNsx-V",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-v/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudAccountNsxVReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteCloudAccountVsphere deletes a v sphere cloud account

Delete a vSphere Cloud Account with a given ID
*/
func (a *Client) DeleteCloudAccountVsphere(params *DeleteCloudAccountVsphereParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudAccountVsphereParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCloudAccountVsphere",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/cloud-accounts-vsphere/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudAccountVsphereReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
EnumerateAwsRegions retrieves regions for an a w s cloud account

Initiate data collection for the regions in an AWS cloud account
*/
func (a *Client) EnumerateAwsRegions(params *EnumerateAwsRegionsParams) (*EnumerateAwsRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumerateAwsRegionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enumerateAwsRegions",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-aws/region-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumerateAwsRegionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EnumerateAwsRegionsOK), nil

}

/*
EnumerateAzureRegions retrieves regions for an azure cloud account

Initiate data collection for the regions in an Azure cloud account
*/
func (a *Client) EnumerateAzureRegions(params *EnumerateAzureRegionsParams) (*EnumerateAzureRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumerateAzureRegionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enumerateAzureRegions",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-azure/region-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumerateAzureRegionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EnumerateAzureRegionsOK), nil

}

/*
EnumerateRegions retrieves regions for a cloud account

Initiate data collection for the specified regions in a cloud account
*/
func (a *Client) EnumerateRegions(params *EnumerateRegionsParams) (*EnumerateRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumerateRegionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enumerateRegions",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts/region-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumerateRegionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EnumerateRegionsOK), nil

}

/*
EnumerateVSphereRegions enumerates regions for a v sphere cloud account

Initiate data collection for the regions in a cloud account
*/
func (a *Client) EnumerateVSphereRegions(params *EnumerateVSphereRegionsParams) (*EnumerateVSphereRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumerateVSphereRegionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enumerateVSphereRegions",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-vsphere/region-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumerateVSphereRegionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EnumerateVSphereRegionsOK), nil

}

/*
GetAwsCloudAccount retrieves an a w s cloud account

Retrieve an AWS cloud account with a given ID
*/
func (a *Client) GetAwsCloudAccount(params *GetAwsCloudAccountParams) (*GetAwsCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAwsCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAwsCloudAccount",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-aws/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAwsCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAwsCloudAccountOK), nil

}

/*
GetAwsCloudAccounts retrieves a w s cloud accounts

Retrieve all AWS cloud accounts
*/
func (a *Client) GetAwsCloudAccounts(params *GetAwsCloudAccountsParams) (*GetAwsCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAwsCloudAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAwsCloudAccounts",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-aws",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAwsCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAwsCloudAccountsOK), nil

}

/*
GetAzureCloudAccount retrieves an azure cloud account

Retrieve an Azure Cloud Account with a given ID
*/
func (a *Client) GetAzureCloudAccount(params *GetAzureCloudAccountParams) (*GetAzureCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAzureCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAzureCloudAccount",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-azure/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAzureCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAzureCloudAccountOK), nil

}

/*
GetAzureCloudAccounts retrieves azure cloud accounts

List all Azure cloud accounts within the current organization
*/
func (a *Client) GetAzureCloudAccounts(params *GetAzureCloudAccountsParams) (*GetAzureCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAzureCloudAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAzureCloudAccounts",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-azure",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAzureCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAzureCloudAccountsOK), nil

}

/*
GetCloudAccount retrieves a cloud account

Retrieve a cloud account for a given ID
*/
func (a *Client) GetCloudAccount(params *GetCloudAccountParams) (*GetCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCloudAccount",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudAccountOK), nil

}

/*
GetCloudAccounts lists cloud accounts

List all cloud accounts within the current organization
*/
func (a *Client) GetCloudAccounts(params *GetCloudAccountsParams) (*GetCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCloudAccounts",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudAccountsOK), nil

}

/*
GetNsxTCloudAccount retrieves a nsx t cloud account

Retrieve a Nsx-T cloud account
*/
func (a *Client) GetNsxTCloudAccount(params *GetNsxTCloudAccountParams) (*GetNsxTCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNsxTCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNsxTCloudAccount",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-t/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNsxTCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNsxTCloudAccountOK), nil

}

/*
GetNsxTCloudAccounts retrieves nsx t cloud accounts

List all Nsx-T cloud accounts within the current organization
*/
func (a *Client) GetNsxTCloudAccounts(params *GetNsxTCloudAccountsParams) (*GetNsxTCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNsxTCloudAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNsxTCloudAccounts",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-t",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNsxTCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNsxTCloudAccountsOK), nil

}

/*
GetNsxVCloudAccount retrieves a n s x v cloud account

Retrieve a NSX-V cloud account
*/
func (a *Client) GetNsxVCloudAccount(params *GetNsxVCloudAccountParams) (*GetNsxVCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNsxVCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNsxVCloudAccount",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-v/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNsxVCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNsxVCloudAccountOK), nil

}

/*
GetNsxVCloudAccounts retrieves n s x v cloud accounts

List all NSX-V cloud accounts within the current organization
*/
func (a *Client) GetNsxVCloudAccounts(params *GetNsxVCloudAccountsParams) (*GetNsxVCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNsxVCloudAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNsxVCloudAccounts",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-v",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNsxVCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNsxVCloudAccountsOK), nil

}

/*
GetVSphereCloudAccount retrieves a v sphere cloud account

Retrieve a vSphere cloud account for a given ID
*/
func (a *Client) GetVSphereCloudAccount(params *GetVSphereCloudAccountParams) (*GetVSphereCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVSphereCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVSphereCloudAccount",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-vsphere/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVSphereCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVSphereCloudAccountOK), nil

}

/*
GetVsphereCloudAccounts retrieves v sphere cloud accounts

List all vSphere Cloud Accounts within the current organization
*/
func (a *Client) GetVsphereCloudAccounts(params *GetVsphereCloudAccountsParams) (*GetVsphereCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVsphereCloudAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVsphereCloudAccounts",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-vsphere",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVsphereCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVsphereCloudAccountsOK), nil

}

/*
PatchCloudAccount patches cloud account

Patch a single CloudAccount
*/
func (a *Client) PatchCloudAccount(params *PatchCloudAccountParams) (*PatchCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCloudAccount",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/cloud-accounts/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchCloudAccountOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
