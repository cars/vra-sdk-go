// Code generated by go-swagger; DO NOT EDIT.

package cloud_account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new cloud account API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cloud account API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateAwsCloudAccount creates an a w s cloud account

Create an AWS cloud account in the current organization
*/
func (a *Client) CreateAwsCloudAccount(params *CreateAwsCloudAccountParams) (*CreateAwsCloudAccountCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAwsCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAwsCloudAccount",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-aws",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAwsCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateAwsCloudAccountCreated), nil

}

/*
CreateAzureCloudAccount creates an azure cloud account

Create an Azure cloud account in the current organization
*/
func (a *Client) CreateAzureCloudAccount(params *CreateAzureCloudAccountParams) (*CreateAzureCloudAccountCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAzureCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAzureCloudAccount",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-azure",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAzureCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateAzureCloudAccountCreated), nil

}

/*
CreateCloudAccount creates a cloud account

Create a cloud account in the current organization
*/
func (a *Client) CreateCloudAccount(params *CreateCloudAccountParams) (*CreateCloudAccountCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCloudAccount",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateCloudAccountCreated), nil

}

/*
CreateGcpCloudAccount creates an g c p cloud account

Create an GCP cloud account in the current organization
*/
func (a *Client) CreateGcpCloudAccount(params *CreateGcpCloudAccountParams) (*CreateGcpCloudAccountCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGcpCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createGcpCloudAccount",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-gcp",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateGcpCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateGcpCloudAccountCreated), nil

}

/*
CreateNsxTCloudAccount creates a n s x t cloud account

Create a NSX-T cloud account in the current organization
*/
func (a *Client) CreateNsxTCloudAccount(params *CreateNsxTCloudAccountParams) (*CreateNsxTCloudAccountCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNsxTCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNsxTCloudAccount",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-t",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNsxTCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateNsxTCloudAccountCreated), nil

}

/*
CreateNsxVCloudAccount creates a n s x v cloud account

Create a NSX-V cloud account within the current organization
*/
func (a *Client) CreateNsxVCloudAccount(params *CreateNsxVCloudAccountParams) (*CreateNsxVCloudAccountCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNsxVCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNsxVCloudAccount",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-v",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNsxVCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateNsxVCloudAccountCreated), nil

}

/*
CreateVSphereCloudAccount creates a v sphere cloud account

Create a vSphere cloud account within the current organization
*/
func (a *Client) CreateVSphereCloudAccount(params *CreateVSphereCloudAccountParams) (*CreateVSphereCloudAccountCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVSphereCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createVSphereCloudAccount",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-vsphere",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateVSphereCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateVSphereCloudAccountCreated), nil

}

/*
DeleteAwsCloudAccount deletes an a w s cloud account

Delete an AWS cloud account with a given id
*/
func (a *Client) DeleteAwsCloudAccount(params *DeleteAwsCloudAccountParams) (*DeleteAwsCloudAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAwsCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAwsCloudAccount",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/cloud-accounts-aws/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAwsCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAwsCloudAccountNoContent), nil

}

/*
DeleteAzureCloudAccount deletes an azure cloud account

Delete an Azure Cloud Account with a given id
*/
func (a *Client) DeleteAzureCloudAccount(params *DeleteAzureCloudAccountParams) (*DeleteAzureCloudAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAzureCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAzureCloudAccount",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/cloud-accounts-azure/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAzureCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAzureCloudAccountNoContent), nil

}

/*
DeleteCloudAccount deletes a cloud account

Delete a cloud account with a given id
*/
func (a *Client) DeleteCloudAccount(params *DeleteCloudAccountParams) (*DeleteCloudAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCloudAccount",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/cloud-accounts/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCloudAccountNoContent), nil

}

/*
DeleteCloudAccountNsxT deletes a n s x t cloud account

Delete a NSX-T cloud account with a given id
*/
func (a *Client) DeleteCloudAccountNsxT(params *DeleteCloudAccountNsxTParams) (*DeleteCloudAccountNsxTNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudAccountNsxTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCloudAccountNsx-T",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-t/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudAccountNsxTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCloudAccountNsxTNoContent), nil

}

/*
DeleteCloudAccountNsxV deletes a n s v v cloud account

Delete a NSV-V cloud account with a given id
*/
func (a *Client) DeleteCloudAccountNsxV(params *DeleteCloudAccountNsxVParams) (*DeleteCloudAccountNsxVNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudAccountNsxVParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCloudAccountNsx-V",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-v/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudAccountNsxVReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCloudAccountNsxVNoContent), nil

}

/*
DeleteGcpCloudAccount deletes an g c p cloud account

Delete an GCP cloud account with a given id
*/
func (a *Client) DeleteGcpCloudAccount(params *DeleteGcpCloudAccountParams) (*DeleteGcpCloudAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGcpCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteGcpCloudAccount",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/cloud-accounts-gcp/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteGcpCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteGcpCloudAccountNoContent), nil

}

/*
DeleteVSphereCloudAccount deletes a v sphere cloud account

Delete a vSphere Cloud Account with a given id
*/
func (a *Client) DeleteVSphereCloudAccount(params *DeleteVSphereCloudAccountParams) (*DeleteVSphereCloudAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVSphereCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteVSphereCloudAccount",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/cloud-accounts-vsphere/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVSphereCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVSphereCloudAccountNoContent), nil

}

/*
EnumerateAwsRegions gets the available regions for specified a w s cloud account

Get the available regions for specified AWS cloud account
*/
func (a *Client) EnumerateAwsRegions(params *EnumerateAwsRegionsParams) (*EnumerateAwsRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumerateAwsRegionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enumerateAwsRegions",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-aws/region-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumerateAwsRegionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EnumerateAwsRegionsOK), nil

}

/*
EnumerateAzureRegions gets the available regions for specified azure cloud account

Get the available regions for specified Azure cloud account
*/
func (a *Client) EnumerateAzureRegions(params *EnumerateAzureRegionsParams) (*EnumerateAzureRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumerateAzureRegionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enumerateAzureRegions",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-azure/region-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumerateAzureRegionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EnumerateAzureRegionsOK), nil

}

/*
EnumerateGcpRegions gets the available regions for specified g c p cloud account

Get the available regions for specified GCP cloud account
*/
func (a *Client) EnumerateGcpRegions(params *EnumerateGcpRegionsParams) (*EnumerateGcpRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumerateGcpRegionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enumerateGcpRegions",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-gcp/region-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumerateGcpRegionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EnumerateGcpRegionsOK), nil

}

/*
EnumerateRegions gets the available regions for specified cloud account

Get the available regions for specified cloud account
*/
func (a *Client) EnumerateRegions(params *EnumerateRegionsParams) (*EnumerateRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumerateRegionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enumerateRegions",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts/region-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumerateRegionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EnumerateRegionsOK), nil

}

/*
EnumerateVSphereRegions gets the available regions for specified v sphere cloud account

Get the available regions for specified vSphere cloud account
*/
func (a *Client) EnumerateVSphereRegions(params *EnumerateVSphereRegionsParams) (*EnumerateVSphereRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumerateVSphereRegionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enumerateVSphereRegions",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-vsphere/region-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumerateVSphereRegionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EnumerateVSphereRegionsOK), nil

}

/*
GetAwsCloudAccount gets an a w s cloud account

Get an AWS cloud account with a given id
*/
func (a *Client) GetAwsCloudAccount(params *GetAwsCloudAccountParams) (*GetAwsCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAwsCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAwsCloudAccount",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-aws/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAwsCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAwsCloudAccountOK), nil

}

/*
GetAwsCloudAccounts gets a w s cloud accounts

Get all AWS cloud accounts within the current organization
*/
func (a *Client) GetAwsCloudAccounts(params *GetAwsCloudAccountsParams) (*GetAwsCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAwsCloudAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAwsCloudAccounts",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-aws",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAwsCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAwsCloudAccountsOK), nil

}

/*
GetAzureCloudAccount gets an azure cloud account

Get an Azure Cloud Account with a given id
*/
func (a *Client) GetAzureCloudAccount(params *GetAzureCloudAccountParams) (*GetAzureCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAzureCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAzureCloudAccount",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-azure/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAzureCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAzureCloudAccountOK), nil

}

/*
GetAzureCloudAccounts gets azure cloud accounts

Get all Azure cloud accounts within the current organization
*/
func (a *Client) GetAzureCloudAccounts(params *GetAzureCloudAccountsParams) (*GetAzureCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAzureCloudAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAzureCloudAccounts",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-azure",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAzureCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAzureCloudAccountsOK), nil

}

/*
GetCloudAccount gets cloud account

Get cloud account with a given id
*/
func (a *Client) GetCloudAccount(params *GetCloudAccountParams) (*GetCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCloudAccount",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudAccountOK), nil

}

/*
GetCloudAccounts gets cloud accounts

Get all cloud accounts within the current organization
*/
func (a *Client) GetCloudAccounts(params *GetCloudAccountsParams) (*GetCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCloudAccounts",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudAccountsOK), nil

}

/*
GetGcpCloudAccount gets an g c p cloud account

Get an GCP cloud account with a given id
*/
func (a *Client) GetGcpCloudAccount(params *GetGcpCloudAccountParams) (*GetGcpCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGcpCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGcpCloudAccount",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-gcp/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGcpCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGcpCloudAccountOK), nil

}

/*
GetGcpCloudAccounts gets g c p cloud accounts

Get all GCP cloud accounts within the current organization
*/
func (a *Client) GetGcpCloudAccounts(params *GetGcpCloudAccountsParams) (*GetGcpCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGcpCloudAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGcpCloudAccounts",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-gcp",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGcpCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGcpCloudAccountsOK), nil

}

/*
GetNsxTCloudAccount gets an n s x t cloud account

Get an NSX-T cloud account with a given id
*/
func (a *Client) GetNsxTCloudAccount(params *GetNsxTCloudAccountParams) (*GetNsxTCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNsxTCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNsxTCloudAccount",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-t/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNsxTCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNsxTCloudAccountOK), nil

}

/*
GetNsxTCloudAccounts gets n s x t cloud accounts

Get all NSX-T cloud accounts within the current organization
*/
func (a *Client) GetNsxTCloudAccounts(params *GetNsxTCloudAccountsParams) (*GetNsxTCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNsxTCloudAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNsxTCloudAccounts",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-t",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNsxTCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNsxTCloudAccountsOK), nil

}

/*
GetNsxVCloudAccount gets an n s x v cloud account

Get an NSX-V cloud account with a given id
*/
func (a *Client) GetNsxVCloudAccount(params *GetNsxVCloudAccountParams) (*GetNsxVCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNsxVCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNsxVCloudAccount",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-v/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNsxVCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNsxVCloudAccountOK), nil

}

/*
GetNsxVCloudAccounts gets n s x v cloud accounts

Get all NSX-V cloud accounts within the current organization
*/
func (a *Client) GetNsxVCloudAccounts(params *GetNsxVCloudAccountsParams) (*GetNsxVCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNsxVCloudAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNsxVCloudAccounts",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-v",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNsxVCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNsxVCloudAccountsOK), nil

}

/*
GetVSphereCloudAccount gets an v sphere cloud account

Get an vSphere cloud account with a given id
*/
func (a *Client) GetVSphereCloudAccount(params *GetVSphereCloudAccountParams) (*GetVSphereCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVSphereCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVSphereCloudAccount",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-vsphere/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVSphereCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVSphereCloudAccountOK), nil

}

/*
GetVSphereCloudAccounts gets v sphere cloud accounts

Get all vSphere cloud accounts within the current organization
*/
func (a *Client) GetVSphereCloudAccounts(params *GetVSphereCloudAccountsParams) (*GetVSphereCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVSphereCloudAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVSphereCloudAccounts",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-vsphere",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVSphereCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVSphereCloudAccountsOK), nil

}

/*
UpdateAwsCloudAccount updates a w s cloud account

Update AWS cloud account
*/
func (a *Client) UpdateAwsCloudAccount(params *UpdateAwsCloudAccountParams) (*UpdateAwsCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAwsCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAwsCloudAccount",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/cloud-accounts-aws/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAwsCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateAwsCloudAccountOK), nil

}

/*
UpdateAzureCloudAccount updates azure cloud account

Update Azure cloud account
*/
func (a *Client) UpdateAzureCloudAccount(params *UpdateAzureCloudAccountParams) (*UpdateAzureCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAzureCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAzureCloudAccount",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/cloud-accounts-azure/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAzureCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateAzureCloudAccountOK), nil

}

/*
UpdateCloudAccount updates cloud account

Update a single CloudAccount
*/
func (a *Client) UpdateCloudAccount(params *UpdateCloudAccountParams) (*UpdateCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCloudAccount",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/cloud-accounts/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateCloudAccountOK), nil

}

/*
UpdateGcpCloudAccount updates g c p cloud account

Update GCP cloud account
*/
func (a *Client) UpdateGcpCloudAccount(params *UpdateGcpCloudAccountParams) (*UpdateGcpCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGcpCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateGcpCloudAccount",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/cloud-accounts-gcp/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateGcpCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateGcpCloudAccountOK), nil

}

/*
UpdateNsxTCloudAccount updates n s x t cloud account

Update NSX-T cloud account
*/
func (a *Client) UpdateNsxTCloudAccount(params *UpdateNsxTCloudAccountParams) (*UpdateNsxTCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNsxTCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNsxTCloudAccount",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-t/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNsxTCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateNsxTCloudAccountOK), nil

}

/*
UpdateNsxVCloudAccount updates n s x v cloud account

Update NSX-V cloud account
*/
func (a *Client) UpdateNsxVCloudAccount(params *UpdateNsxVCloudAccountParams) (*UpdateNsxVCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNsxVCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNsxVCloudAccount",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-v/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNsxVCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateNsxVCloudAccountOK), nil

}

/*
UpdateVSphereCloudAccount updates v sphere cloud account

Update vSphere cloud account
*/
func (a *Client) UpdateVSphereCloudAccount(params *UpdateVSphereCloudAccountParams) (*UpdateVSphereCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVSphereCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateVSphereCloudAccount",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/cloud-accounts-vsphere/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateVSphereCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateVSphereCloudAccountOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
