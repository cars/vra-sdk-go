// Code generated by go-swagger; DO NOT EDIT.

package requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new requests API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for requests API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ActionDeploymentRequestUsingPOST(params *ActionDeploymentRequestUsingPOSTParams, opts ...ClientOption) (*ActionDeploymentRequestUsingPOSTOK, error)

	GetDeploymentRequestsUsingGET(params *GetDeploymentRequestsUsingGETParams, opts ...ClientOption) (*GetDeploymentRequestsUsingGETOK, error)

	GetEventLogsContentUsingGET(params *GetEventLogsContentUsingGETParams, opts ...ClientOption) (*GetEventLogsContentUsingGETOK, error)

	GetEventLogsUsingGET(params *GetEventLogsUsingGETParams, opts ...ClientOption) (*GetEventLogsUsingGETOK, error)

	GetRequestEventsUsingGET(params *GetRequestEventsUsingGETParams, opts ...ClientOption) (*GetRequestEventsUsingGETOK, error)

	GetRequestUsingGET(params *GetRequestUsingGETParams, opts ...ClientOption) (*GetRequestUsingGETOK, error)

	ListResourceRequestsUsingGET(params *ListResourceRequestsUsingGETParams, opts ...ClientOption) (*ListResourceRequestsUsingGETOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ActionDeploymentRequestUsingPOST submits action on requests allowable values cancel dismiss

  Cancel can be submitted on In-progress requests and Dismiss can be submitted on Failed requests.
*/
func (a *Client) ActionDeploymentRequestUsingPOST(params *ActionDeploymentRequestUsingPOSTParams, opts ...ClientOption) (*ActionDeploymentRequestUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionDeploymentRequestUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "actionDeploymentRequestUsingPOST",
		Method:             "POST",
		PathPattern:        "/deployment/api/requests/{requestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActionDeploymentRequestUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionDeploymentRequestUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for actionDeploymentRequestUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentRequestsUsingGET fetches deployment requests

  Returns the requests for the deployment.
*/
func (a *Client) GetDeploymentRequestsUsingGET(params *GetDeploymentRequestsUsingGETParams, opts ...ClientOption) (*GetDeploymentRequestsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentRequestsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeploymentRequestsUsingGET",
		Method:             "GET",
		PathPattern:        "/deployment/api/deployments/{deploymentId}/requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeploymentRequestsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentRequestsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentRequestsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEventLogsContentUsingGET fetches event logs content as a file

  Returns the log file for an event.
*/
func (a *Client) GetEventLogsContentUsingGET(params *GetEventLogsContentUsingGETParams, opts ...ClientOption) (*GetEventLogsContentUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventLogsContentUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getEventLogsContentUsingGET",
		Method:             "GET",
		PathPattern:        "/deployment/api/requests/{requestId}/events/{eventId}/logs/download",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEventLogsContentUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEventLogsContentUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEventLogsContentUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEventLogsUsingGET fetches event logs

  Returns the logs for an event.
*/
func (a *Client) GetEventLogsUsingGET(params *GetEventLogsUsingGETParams, opts ...ClientOption) (*GetEventLogsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventLogsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getEventLogsUsingGET",
		Method:             "GET",
		PathPattern:        "/deployment/api/requests/{requestId}/events/{eventId}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEventLogsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEventLogsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEventLogsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRequestEventsUsingGET fetches request events

  Returns all the events for a request.
*/
func (a *Client) GetRequestEventsUsingGET(params *GetRequestEventsUsingGETParams, opts ...ClientOption) (*GetRequestEventsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRequestEventsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRequestEventsUsingGET",
		Method:             "GET",
		PathPattern:        "/deployment/api/requests/{requestId}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRequestEventsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRequestEventsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRequestEventsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRequestUsingGET gets the request

  Returns the request with the given ID.
*/
func (a *Client) GetRequestUsingGET(params *GetRequestUsingGETParams, opts ...ClientOption) (*GetRequestUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRequestUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRequestUsingGET",
		Method:             "GET",
		PathPattern:        "/deployment/api/requests/{requestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRequestUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRequestUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRequestUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListResourceRequestsUsingGET gets all requests for a resource
*/
func (a *Client) ListResourceRequestsUsingGET(params *ListResourceRequestsUsingGETParams, opts ...ClientOption) (*ListResourceRequestsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListResourceRequestsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listResourceRequestsUsingGET",
		Method:             "GET",
		PathPattern:        "/deployment/api/resources/{resourceId}/requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListResourceRequestsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListResourceRequestsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listResourceRequestsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
