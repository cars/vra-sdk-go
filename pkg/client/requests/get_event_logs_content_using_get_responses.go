// Code generated by go-swagger; DO NOT EDIT.

package requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// GetEventLogsContentUsingGETReader is a Reader for the GetEventLogsContentUsingGET structure.
type GetEventLogsContentUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEventLogsContentUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEventLogsContentUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetEventLogsContentUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetEventLogsContentUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetEventLogsContentUsingGETOK creates a GetEventLogsContentUsingGETOK with default headers values
func NewGetEventLogsContentUsingGETOK() *GetEventLogsContentUsingGETOK {
	return &GetEventLogsContentUsingGETOK{}
}

/* GetEventLogsContentUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetEventLogsContentUsingGETOK struct {
	Payload models.StreamingResponseBody
}

func (o *GetEventLogsContentUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /deployment/api/requests/{requestId}/events/{eventId}/logs/download][%d] getEventLogsContentUsingGETOK  %+v", 200, o.Payload)
}
func (o *GetEventLogsContentUsingGETOK) GetPayload() models.StreamingResponseBody {
	return o.Payload
}

func (o *GetEventLogsContentUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEventLogsContentUsingGETUnauthorized creates a GetEventLogsContentUsingGETUnauthorized with default headers values
func NewGetEventLogsContentUsingGETUnauthorized() *GetEventLogsContentUsingGETUnauthorized {
	return &GetEventLogsContentUsingGETUnauthorized{}
}

/* GetEventLogsContentUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetEventLogsContentUsingGETUnauthorized struct {
}

func (o *GetEventLogsContentUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /deployment/api/requests/{requestId}/events/{eventId}/logs/download][%d] getEventLogsContentUsingGETUnauthorized ", 401)
}

func (o *GetEventLogsContentUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetEventLogsContentUsingGETNotFound creates a GetEventLogsContentUsingGETNotFound with default headers values
func NewGetEventLogsContentUsingGETNotFound() *GetEventLogsContentUsingGETNotFound {
	return &GetEventLogsContentUsingGETNotFound{}
}

/* GetEventLogsContentUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetEventLogsContentUsingGETNotFound struct {
	Payload *models.Error
}

func (o *GetEventLogsContentUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /deployment/api/requests/{requestId}/events/{eventId}/logs/download][%d] getEventLogsContentUsingGETNotFound  %+v", 404, o.Payload)
}
func (o *GetEventLogsContentUsingGETNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetEventLogsContentUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
