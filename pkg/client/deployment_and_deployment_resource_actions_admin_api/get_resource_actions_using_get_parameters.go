// Code generated by go-swagger; DO NOT EDIT.

package deployment_and_deployment_resource_actions_admin_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetResourceActionsUsingGETParams creates a new GetResourceActionsUsingGETParams object
// with the default values initialized.
func NewGetResourceActionsUsingGETParams() *GetResourceActionsUsingGETParams {
	var ()
	return &GetResourceActionsUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetResourceActionsUsingGETParamsWithTimeout creates a new GetResourceActionsUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetResourceActionsUsingGETParamsWithTimeout(timeout time.Duration) *GetResourceActionsUsingGETParams {
	var ()
	return &GetResourceActionsUsingGETParams{

		timeout: timeout,
	}
}

// NewGetResourceActionsUsingGETParamsWithContext creates a new GetResourceActionsUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetResourceActionsUsingGETParamsWithContext(ctx context.Context) *GetResourceActionsUsingGETParams {
	var ()
	return &GetResourceActionsUsingGETParams{

		Context: ctx,
	}
}

// NewGetResourceActionsUsingGETParamsWithHTTPClient creates a new GetResourceActionsUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetResourceActionsUsingGETParamsWithHTTPClient(client *http.Client) *GetResourceActionsUsingGETParams {
	var ()
	return &GetResourceActionsUsingGETParams{
		HTTPClient: client,
	}
}

/*GetResourceActionsUsingGETParams contains all the parameters to send to the API endpoint
for the get resource actions using g e t operation typically these are written to a http.Request
*/
type GetResourceActionsUsingGETParams struct {

	/*Page
	  Results page you want to retrieve (0..N)

	*/
	Page *int32
	/*ProjectID
	  Find resource actions available to the given projectId.

	*/
	ProjectID *string
	/*Search
	  Optional search string to filter on action name, ID, or description.

	*/
	Search *string
	/*Size
	  Number of records per page.

	*/
	Size *int32
	/*Sort
	  Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.

	*/
	Sort []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get resource actions using get params
func (o *GetResourceActionsUsingGETParams) WithTimeout(timeout time.Duration) *GetResourceActionsUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get resource actions using get params
func (o *GetResourceActionsUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get resource actions using get params
func (o *GetResourceActionsUsingGETParams) WithContext(ctx context.Context) *GetResourceActionsUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get resource actions using get params
func (o *GetResourceActionsUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get resource actions using get params
func (o *GetResourceActionsUsingGETParams) WithHTTPClient(client *http.Client) *GetResourceActionsUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get resource actions using get params
func (o *GetResourceActionsUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPage adds the page to the get resource actions using get params
func (o *GetResourceActionsUsingGETParams) WithPage(page *int32) *GetResourceActionsUsingGETParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get resource actions using get params
func (o *GetResourceActionsUsingGETParams) SetPage(page *int32) {
	o.Page = page
}

// WithProjectID adds the projectID to the get resource actions using get params
func (o *GetResourceActionsUsingGETParams) WithProjectID(projectID *string) *GetResourceActionsUsingGETParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the get resource actions using get params
func (o *GetResourceActionsUsingGETParams) SetProjectID(projectID *string) {
	o.ProjectID = projectID
}

// WithSearch adds the search to the get resource actions using get params
func (o *GetResourceActionsUsingGETParams) WithSearch(search *string) *GetResourceActionsUsingGETParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the get resource actions using get params
func (o *GetResourceActionsUsingGETParams) SetSearch(search *string) {
	o.Search = search
}

// WithSize adds the size to the get resource actions using get params
func (o *GetResourceActionsUsingGETParams) WithSize(size *int32) *GetResourceActionsUsingGETParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the get resource actions using get params
func (o *GetResourceActionsUsingGETParams) SetSize(size *int32) {
	o.Size = size
}

// WithSort adds the sort to the get resource actions using get params
func (o *GetResourceActionsUsingGETParams) WithSort(sort []string) *GetResourceActionsUsingGETParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get resource actions using get params
func (o *GetResourceActionsUsingGETParams) SetSort(sort []string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *GetResourceActionsUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Page != nil {

		// query param page
		var qrPage int32
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.ProjectID != nil {

		// query param projectId
		var qrProjectID string
		if o.ProjectID != nil {
			qrProjectID = *o.ProjectID
		}
		qProjectID := qrProjectID
		if qProjectID != "" {
			if err := r.SetQueryParam("projectId", qProjectID); err != nil {
				return err
			}
		}

	}

	if o.Search != nil {

		// query param search
		var qrSearch string
		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {
			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}

	}

	if o.Size != nil {

		// query param size
		var qrSize int32
		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt32(qrSize)
		if qSize != "" {
			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}

	}

	valuesSort := o.Sort

	joinedSort := swag.JoinByFormat(valuesSort, "multi")
	// query array param sort
	if err := r.SetQueryParam("sort", joinedSort...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
